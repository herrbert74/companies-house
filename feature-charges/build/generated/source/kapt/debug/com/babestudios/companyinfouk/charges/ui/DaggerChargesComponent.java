// Generated by Dagger (https://dagger.dev).
package com.babestudios.companyinfouk.charges.ui;

import com.babestudios.base.rxjava.ErrorResolver;
import com.babestudios.companyinfouk.core.injection.CoreComponent;
import com.babestudios.companyinfouk.data.CompaniesRepositoryContract;
import com.babestudios.companyinfouk.navigation.features.ChargesNavigator;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerChargesComponent implements ChargesComponent {
  private final CoreComponent coreComponent;

  private DaggerChargesComponent(CoreComponent coreComponentParam) {
    this.coreComponent = coreComponentParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public ChargesNavigator navigator() {
    return Preconditions.checkNotNull(coreComponent.chargesNavigation(), "Cannot return null from a non-@Nullable component method");}

  @Override
  public CompaniesRepositoryContract companiesRepository() {
    return Preconditions.checkNotNull(coreComponent.companiesRepository(), "Cannot return null from a non-@Nullable component method");}

  @Override
  public ErrorResolver errorResolver() {
    return Preconditions.checkNotNull(coreComponent.errorResolver(), "Cannot return null from a non-@Nullable component method");}

  public static final class Builder {
    private CoreComponent coreComponent;

    private Builder() {
    }

    public Builder coreComponent(CoreComponent coreComponent) {
      this.coreComponent = Preconditions.checkNotNull(coreComponent);
      return this;
    }

    public ChargesComponent build() {
      Preconditions.checkBuilderRequirement(coreComponent, CoreComponent.class);
      return new DaggerChargesComponent(coreComponent);
    }
  }
}
