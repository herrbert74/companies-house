package com.babestudios.companyinfouk.data.local;


import java.util.HashMap;
import java.util.Map;

public class ApiLookupHelper {

	private Map<String, String> sicMap = new HashMap<>();
	private Map<String, String> accountTypeMap = new HashMap<>();
	private Map<String, String> filingHistoryDescriptionMap = new HashMap<>();

	public String sicLookup(String code) {
		return sicMap.get(code);
	}
	public String accountTypeLookup(String accountType) {
		return accountTypeMap.get(accountType);
	}
	public String filingHistoryDescriptionLookup(String filingHistory) {
		return filingHistoryDescriptionMap.get(filingHistory);
	}

	public ApiLookupHelper() {
		createSicMap();
		createAccountTypeMap();
		createFilingHistoryDescriptionMap();
	}

	private void createFilingHistoryDescriptionMap() {
		filingHistoryDescriptionMap.put("liquidation-receiver-administrative-receivers-report", "**Administrative Receiver's report**");
		filingHistoryDescriptionMap.put("liquidation-compulsory-notice-winding-up", "**Notice of order** of court to wind up.");
		filingHistoryDescriptionMap.put("liquidation-voluntary-statement-of-affairs-with-form-attached", "**Statement of affairs** with form {form_attached}");
		filingHistoryDescriptionMap.put("liquidation-voluntary-statement-of-affairs", "**Statement of affairs**");
		filingHistoryDescriptionMap.put("liquidation-compulsory-appointment-liquidator", "**Appointment of a liquidator**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-resignation-liquidator", "**Resignation of a liquidator**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-leave-to-resign-liquidator", "**Court order granting voluntary liquidator leave to resign**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-removal-liquidator", "**Certificate of removal of voluntary liquidator**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-cease-to-act-as-liquidator", "**Notice of ceasing to act as a voluntary liquidator**");
		filingHistoryDescriptionMap.put("liquidation-compulsory-return-final-meeting", "**Return of final meeting** of creditors");
		filingHistoryDescriptionMap.put("liquidation-voluntary-death-liquidator", "**Death of a liquidator**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-vacation-liquidator", "**Notice of vacation** of office of voluntary liquidator");
		filingHistoryDescriptionMap.put("liquidation-voluntary-constitution-liquidation-committee", "**Notice of Constitution** of Liquidation Committee");
		filingHistoryDescriptionMap.put("liquidation-voluntary-creditors-paid-in-full", "Certificate that Creditors have been paid in full");
		filingHistoryDescriptionMap.put("liquidation-voluntary-statement-of-receipts-and-payments-with-brought-down-date", "**Liquidators statement of receipts and payments** to {brought_down_date}");
		filingHistoryDescriptionMap.put("liquidation-voluntary-statement-of-receipts-and-payments", "**Liquidators statement of receipts and payments**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-appeal", "**Order of court on appeal** against Secretary of State's decision under Section 203(4) or 205(4).");
		filingHistoryDescriptionMap.put("liquidation-voluntary-declaration-of-solvency", "**Declaration of solvency**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-members-return-of-final-meeting", "**Return of final meeting** in a members' voluntary winding up");
		filingHistoryDescriptionMap.put("liquidation-voluntary-creditors-return-of-final-meeting", "**Return of final meeting** in a creditors' voluntary winding up");
		filingHistoryDescriptionMap.put("liquidation-compulsory-early-completion", "**Early completion of winding up**");
		filingHistoryDescriptionMap.put("liquidation-compulsory-early-completion-social-landlords", "**Early completion of winding up**");
		filingHistoryDescriptionMap.put("liquidation-compulsory-defer-dissolution", "**Dissolution deferment**");
		filingHistoryDescriptionMap.put("liquidation-compulsory-notice-secretary-of-state-for-direction", "**Notice to Secretary of State** for direction");
		filingHistoryDescriptionMap.put("liquidation-compulsory-notice-secretary-of-state-for-direction-social-landlords", "**Notice to Secretary of State** for direction");
		filingHistoryDescriptionMap.put("liquidation-compulsory-completion-social-landlords", "**Completion of winding up**");
		filingHistoryDescriptionMap.put("liquidation-compulsory-return-of-final-meeting-scotland", "**Notice of final meeting** of creditors");
		filingHistoryDescriptionMap.put("liquidation-compulsory-appointment-provisional-liquidator-scotland", "**Appointment of a provisional liquidator**");
		filingHistoryDescriptionMap.put("liquidation-compulsory-notice-winding-up-scotland", "**Court order** notice of winding up");
		filingHistoryDescriptionMap.put("liquidation-compulsory-notice-winding-up-order", "**Court order** notice of winding up");
		filingHistoryDescriptionMap.put("liquidation-compulsory-completion", "**Completion of winding up**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-defer-dissolution", "**Deferment of dissolution** (voluntary)");
		filingHistoryDescriptionMap.put("liquidation-compulsory-winding-up-order-with-case-start-date", "**Order of court** to wind up on {case_start_date}");
		filingHistoryDescriptionMap.put("liquidation-compulsory-winding-up-order", "**Order of court** to wind up");
		filingHistoryDescriptionMap.put("liquidation-in-administration-appointment-of-administrator", "**Appointment of an administrator**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-statement-of-affairs-with-form-attached", "**Statement of affairs** with form {form_attached}");
		filingHistoryDescriptionMap.put("liquidation-in-administration-statement-of-affairs", "**Statement of affairs**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-proposals", "**Statement of administrator's proposal**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-extension-of-time", "**Notice of extension of time period** of the administration");
		filingHistoryDescriptionMap.put("liquidation-in-administration-revised-proposals", "**Statement of administrator's revised proposal**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-result-creditors-meeting", "**Result of meeting of creditors**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-progress-report-with-brought-down-date", "**Administrator's progress report** to {brought_down_date}");
		filingHistoryDescriptionMap.put("liquidation-in-administration-progress-report", "**Administrator's progress report**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-amended-certificate-of-constitution-creditors-committee", "**Amended certificate of constitution** of creditors' committee");
		filingHistoryDescriptionMap.put("liquidation-in-administration-change-in-committee-membership", "**Administrator's notice** of a change in committee membership");
		filingHistoryDescriptionMap.put("liquidation-in-administration-notice-of-order-deal-with-charged-property", "**Notice of order to deal with charged property**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-automatic-end-of-case", "**Notice of automatic end of Administration**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-extension-of-period", "**Notice of extension of period** of Administration");
		filingHistoryDescriptionMap.put("liquidation-in-administration-end-of-administration", "**Notice of end of Administration**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-court-order-ending-administration", "**Notice of a court order ending Administration**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-move-to-creditors-voluntary-liquidation", "**Notice of move from Administration case to Creditors Voluntary Liquidation**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-move-to-dissolution-with-case-end-date", "**Notice of move from Administration to Dissolution** on {case_end_date}");
		filingHistoryDescriptionMap.put("liquidation-in-administration-move-to-dissolution", "**Notice of move from Administration to Dissolution**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-change-date-of-dissolution", "**Notice to Registrar** in respect of date of dissolution");
		filingHistoryDescriptionMap.put("liquidation-in-administration-resignation-of-administrator", "**Notice of resignation of an administrator**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-vacation-of-office", "**Notice of vacation of office by administrator**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-appointment-of-replacement-additional-adminstrator", "**Notice of appointment** of replacement/additional administrator");
		filingHistoryDescriptionMap.put("liquidation-in-administration-appointment-of-administrator-scotland", "**Appointment of an administrator**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-notice-of-statement-of-affairs-scotland-with-form-attached", "**Statement of affairs** with form {form_attached}");
		filingHistoryDescriptionMap.put("liquidation-in-administration-notice-of-statement-of-affairs-scotland", "**Statement of affairs**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-proposals-scotland", "**Statement of administrator's proposal**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-revised-proposals-scotland", "**Statement of administrator's revised proposal**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-deemed-proposal-scotland", "**Statement of administrator's deemed proposal**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-result-of-creditors-meeting-scotland", "**Notice of result of meeting of creditors**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-progress-report-scotland-with-brought-down-date", "**Administrator's progress report** to {brought_down_date}");
		filingHistoryDescriptionMap.put("liquidation-in-administration-progress-report-scotland", "**Administrator's progress report**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-order-to-deal-with-secured-property-scotland", "**Notice of order to deal with secured property**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-automatic-end-scotland", "**Notice of automatic end** of Administration");
		filingHistoryDescriptionMap.put("liquidation-in-administration-extension-of-period-scotland", "**Notice of extension of period of Administration**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-end-of-administration-scotland", "**Notice of end of Administration**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-court-order-ending-administration-scotland", "**Notice of court order ending Administration**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-move-to-creditors-voluntary-liquidation-scotland", "**Notice of move from Administration to Creditors Voluntary Liquidation**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-move-to-dissolution-scotland", "**Notice of move from Administration to Dissolution**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-date-of-dissolution-scotland", "**Notice to Registrar** in respect of date of dissolution");
		filingHistoryDescriptionMap.put("liquidation-in-administration-resignation-of-administrator-scotland", "**Notice of resignation of administrator**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-vacation-of-office-scotland", "**Notice of vacation of office by administrator**");
		filingHistoryDescriptionMap.put("liquidation-in-administration-appointment-of-replacement-additional-administrator-scotland", "**Notice of appointment** of replacement/additional administrator");
		filingHistoryDescriptionMap.put("liquidation-in-administration-court-order-under-section-176A", "**Notice to Registrar** of companies in respect of order under section 176A");
		filingHistoryDescriptionMap.put("liquidation-receiver-appointment-of-receiver-scotland", "**Notice of the appointment of receiver** by a holder of a floating charge");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arrangement-meeting-approving-creditors-voluntary-arrangement-scotland", "**Notice of report of meeting approving voluntary arrangement**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arrangement-revocation-or-suspension-of-voluntary-arrangement-scotland", "**Notice of order of revocation or suspension of voluntary arrangement**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-supervisors-abstracts-of-receipts-payments-scotland-with-brought-down-date", "**Notice of voluntary arrangement** supervisor's abstract of receipts and payments to {brought_down_date}");
		filingHistoryDescriptionMap.put("liquidation-voluntary-supervisors-abstracts-of-receipts-payments-scotland", "**Notice of voluntary arrangement** supervisor's abstract of receipts and payments");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arrangement-notice-completion-scotland", "**Notice of completion of voluntary arrangement**");
		filingHistoryDescriptionMap.put("liquidation-receiver-appointment-of-receiver-by-court-scotland", "**Notice of the appoinment** of a receiver by the court");
		filingHistoryDescriptionMap.put("liquidation-administration-order-to-deal-secured-property-scotland", "**Notice of order to deal with secured property**");
		filingHistoryDescriptionMap.put("liquidation-administration-variation-of-administration-order-scotland", "**Notice of variation of an Administration Order**");
		filingHistoryDescriptionMap.put("liquidation-administration-notice-of-administration-order-scotland", "**Notice of Administration Order**");
		filingHistoryDescriptionMap.put("liquidation-administration-dismissal-of-petition-scotland", "**Notice of dismissal of petition** for Administration Order");
		filingHistoryDescriptionMap.put("liquidation-administration-discharge-of-administration-order-scotland", "**Notice of discharge of Administration Order**");
		filingHistoryDescriptionMap.put("liquidation-administration-statement-of-administrators-proposals-scotland", "**Statement of administrator's proposal**");
		filingHistoryDescriptionMap.put("liquidation-administration-notice-deemed-approval-of-proposals-northern-ireland", "**Notice of deemed approval of proposals**");
		filingHistoryDescriptionMap.put("liquidation-administration-administrators-abstracts-of-receipts-and-payments-scotland-with-brought-down-date", "**Administrator's abstract** of receipts and payments to {brought_down_date}");
		filingHistoryDescriptionMap.put("liquidation-administration-administrators-abstracts-of-receipts-and-payments-scotland", "**Administrator's abstract** of receipts and payments");
		filingHistoryDescriptionMap.put("liquidation-receiver-ceasing-to-act-scotland", "**Notice of ceasing to act as receiver or manager**");
		filingHistoryDescriptionMap.put("liquidation-receiver-dispose-of-secured-property-scotland", "**Notice of authorisation** to dispose of secured property");
		filingHistoryDescriptionMap.put("liquidation-receiver-receivers-report-scotland", "**Notice of receiver's report**");
		filingHistoryDescriptionMap.put("liquidation-receiver-receivers-abstracts-of-receipts-and-payments-scotland", "**Receiver/Manager's abstract of receipts and payments**");
		filingHistoryDescriptionMap.put("liquidation-receiver-death-of-receiver-scotland", "**Death of receiver**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-removal-of-receiver-scotland", "**Certificate of removal of liquidator**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-removal-of-liquidator-scotland", "**Notice of removal of liquidator**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-release-of-liquidator-scotland", "**Certificate of release of liquidator** by accountant of court");
		filingHistoryDescriptionMap.put("liquidation-voluntary-certificate-release-of-liquidator-scotland", "**Certificate of release of liquidator**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-court-order-of-resignation-of-liquidator-scotland", "**Court order of resignation of liquidator** ");
		filingHistoryDescriptionMap.put("liquidation-voluntary-resignation-of-liquidator-scotland", "**Notice of resignation of liquidator**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-death-of-liquidator-scotland", "**Notice of death of liquidator**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-vacation-of-liquidator-scotland", "**Notice of vacation of liquidator**");
		filingHistoryDescriptionMap.put("liquidation-compulsory-winding-up-order-scotland", "**Notice of winding up order**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-certificate-of-continuance-scotland", "**Liquidator's certificate of continuance**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-continuance-scotland", "**Constitution of continuance** liquidation creditors committee");
		filingHistoryDescriptionMap.put("liquidation-voluntary-creditors-paid-in-full-scotland", "**Liquidator's certificate that creditors have been paid in full**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-certificate-creditors-paid-in-full-scotland", "**Certificate that creditors have been paid in full**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-declaration-of-solvency-scotland", "**Declaration of solvency**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-return-of-final-meeting-scotland", "**Return of final meeting** of voluntary winding up");
		filingHistoryDescriptionMap.put("liquidation-compulsory-court-order-sisting-scotland", "**Notice of court order sisting proceedings in a winding up**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-notice-under-section-204-scotland", "**Notice under Section 204(6) or 205(6)**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-creditors-voluntary-winding-up-scotland", "**Confirmation of creditors' voluntary winding up**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-liquidators-statement-of-receipts-payments-scotland", "**Statement of receipts and payments**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-appointment-of-liquidator", "**Appointment of a voluntary liquidator**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arrangement-meeting-approving-companies-voluntary-arragement", "**Notice to Registrar of companies voluntary arrangement** taking effect");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arrangement-revocation-or-suspension", "**Order of revocation or suspension of voluntary arrangement**");
		filingHistoryDescriptionMap.put("liquidation-cva-supervisors-abstracts-of-receipts-payments-with-brought-down-date", "**Voluntary arrangement supervisor's abstract of receipts and payments** to {brought_down_date}");
		filingHistoryDescriptionMap.put("liquidation-cva-supervisors-abstracts-of-receipts-payments", "**Voluntary arrangement supervisor's abstract of receipts and payments**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arrangement-completion-with-date", "**Notice of completion of voluntary arrangement** on {case_end_date}");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arrangement-completion", "**Notice of completion of voluntary arrangement**");
		filingHistoryDescriptionMap.put("liquidation-administration-notice-of-administration-order", "**Notice of Administration Order**");
		filingHistoryDescriptionMap.put("liquidation-administration-order", "**Administration Order**");
		filingHistoryDescriptionMap.put("liquidation-administration-administrators-abstracts-of-receipts-and-payments-with-brought-down-date", "**Administrator's abstract of receipts and payments** to {brought_down_date}");
		filingHistoryDescriptionMap.put("liquidation-administration-administrators-abstracts-of-receipts-and-payments", "**Administrator's abstract of receipts and payments**");
		filingHistoryDescriptionMap.put("liquidation-administration-order-to-deal-charged-property", "**Notice of order to deal with charged property**");
		filingHistoryDescriptionMap.put("liquidation-administration-discharge-of-administration-order", "**Notice of discharge of Administration Order**");
		filingHistoryDescriptionMap.put("liquidation-administration-variation-of-administration-order", "**Notice of variation of an Administration Order**");
		filingHistoryDescriptionMap.put("liquidation-administration-proposals", "**Statement of administrator's proposal**");
		filingHistoryDescriptionMap.put("liquidation-administration-meeting-of-creditors", "**Notice of result of meeting of creditors**");
		filingHistoryDescriptionMap.put("liquidation-receiver-statement-of-affairs", "**Statement of Affairs** in administrative receivership following report to creditors");
		filingHistoryDescriptionMap.put("liquidation-receiver-amended-certificate-of-constitution", "**Amended certificate of constitution of creditors' committee**");
		filingHistoryDescriptionMap.put("liquidation-receiver-report-change-of-committee", "**Administrator's report of a change in committee membership**");
		filingHistoryDescriptionMap.put("liquidation-receiver-abstracts-of-receipts-and-payments-with-brought-down-date", "**Receiver's abstract of receipts and payments** to {brought_down_date}");
		filingHistoryDescriptionMap.put("liquidation-receiver-abstracts-of-receipts-and-payments", "**Receiver's abstract of receipts and payments**");
		filingHistoryDescriptionMap.put("liquidation-receiver-death-of-receiver", "**Notice of adminstrative receivers' death**");
		filingHistoryDescriptionMap.put("liquidation-receiver-order-to-dispose-of-charged-property", "**Notice of order to dispose of charged property**");
		filingHistoryDescriptionMap.put("liquidation-administration-approval-of-proposals-scotland", "**Notice of deemed approval of proposals**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-determination", "**Determination**");
		filingHistoryDescriptionMap.put("liquidation-administration-notice-of-petition-scotland", "**Notice of Petition for Administration Order**");
		filingHistoryDescriptionMap.put("liquidation-insolvency-judgement-overseas", "**Insolvency judgement**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arragenment-commencement-of-moratorium", "**Commencement of moratorium**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arrangement-extension-of-moratorium", "**Extension or further extension of moratorium**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arrangement-ending-of-moratorium", "**End of moratorium**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arrangement-withdrawal-of-consent", "**Withdrawal of nominee's consent to act**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arrangement-replacement-nominee", "**Appointment of replacement nominee**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arrangement-commencement-of-moratorium-scotland", "**Commencement of moratorium**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arrangement-extension-of-moratorium-scotland", "**Extension or further extension of moratorium**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arrangement-ending-of-moratorium-scotland", "**End of moratorium**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arrangement-withdrawal-of-consent-scotland", "**Withdrawal of nominee's consent to act**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-arrangement-replacement-nominee-scotland", "**Appointment of replacement nominee**");
		filingHistoryDescriptionMap.put("liquidation-administration-statement-of-affairs-scotland", "**Statement of affairs**");
		filingHistoryDescriptionMap.put("liquidation-administration-statement-of-concurrence-scotland", "**Statement of concurrence**");
		filingHistoryDescriptionMap.put("liquidation-miscellaneous", "**Insolvency filing**");
		filingHistoryDescriptionMap.put("liquidation-court-order-miscellaneous", "**Insolvency court order**");
		filingHistoryDescriptionMap.put("liquidation-resolution-miscellaneous", "**Insolvency resolution**");
		filingHistoryDescriptionMap.put("liquidation-regulations-onset-of-insolvency-overseas", "**EC Regs onset of insolvency**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-notice-order-under-section-176a", "**Notice to Registrar** of companies in respect of order under section 176A");
		filingHistoryDescriptionMap.put("liquidation-court-order-to-stay-winding-up", "**Order of court to stay winding up**");
		filingHistoryDescriptionMap.put("liquidation-court-order-to-unstay-winding-up", "**Order of court to unstay winding up**");
		filingHistoryDescriptionMap.put("liquidation-court-order-recall-provisional-liquidator", "**Order of court recall of provisional liquidator**");
		filingHistoryDescriptionMap.put("liquidation-court-order-limiting-disclosure", "**Order of court limiting disclosure**");
		filingHistoryDescriptionMap.put("liquidation-appointment-of-provisional-liquidator", "**Appointment of provisional liquidator**");
		filingHistoryDescriptionMap.put("liquidation-court-order-early-dissolution", "**Order of court for early dissolution**");
		filingHistoryDescriptionMap.put("liquidation-court-order-to-rescind-winding-up", "**Order of court to rescind winding up**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-extraordinary-resolution-to-wind-up-with-case-start-date", "**Extraordinary resolution to wind up** on {case_start_date}");
		filingHistoryDescriptionMap.put("liquidation-voluntary-extraordinary-resolution-to-wind-up", "**Extraordinary resolution to wind up**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-special-resolution-to-wind-up", "**Special resolution to wind up**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-special-resolution-to-wind-up-case-start-date", "**Special resolution to wind up** on {case_start_date}");
		filingHistoryDescriptionMap.put("liquidation-compulsory-release-official-receiver", "**Court order to release official receiver**");
		filingHistoryDescriptionMap.put("liquidation-miscellaneous-northern-ireland", "**Insolvency filing**");
		filingHistoryDescriptionMap.put("liquidation-administrators-abstracts-northern-ireland", "**Administrator's abstract of receipts and payments**");
		filingHistoryDescriptionMap.put("liquidation-notice-order-of-charged-property-northern-ireland", "**Notice of order to deal with charged property**");
		filingHistoryDescriptionMap.put("liquidation-discharge-of-administration-order-northern-ireland", "**Notice of discharge of Administration Order**");
		filingHistoryDescriptionMap.put("liquidation-discharge-administration-order--northern-ireland", "**Notice of discharge of Administration Order**");
		filingHistoryDescriptionMap.put("liquidation-variation-of-administration-order-northern-ireland", "**Notice of variation of an Administration Order**");
		filingHistoryDescriptionMap.put("liquidation-statement-of-proposals-northern-ireland", "**Statement of administrator's proposal**");
		filingHistoryDescriptionMap.put("liquidation-result-of-creditors-meeting-northern-ireland", "**Notice of result of meeting of creditors**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-notice-to-gazette-appointment-of-liquidator", "**Notice to the Gazette** of an appointment of a liquidator");
		filingHistoryDescriptionMap.put("liquidation-appointment-of-liquidator-overseas", "**Appointment of a liquidator** of an overseas company");
		filingHistoryDescriptionMap.put("liquidation-insolvency-proceedings-overseas", "**Insolvency proceedings** against an overseas company");
		filingHistoryDescriptionMap.put("liquidation-insolvency-proceedings-limited-liability-partnership", "**Insolvency proceedings**");
		filingHistoryDescriptionMap.put("liquidation-winding-up-overseas", "**Winding up** of an overseas company");
		filingHistoryDescriptionMap.put("liquidation-cessation-of-insolvency-proceedings-overseas", "**Cessation of an overseas company** subject to insolvency proceedings");
		filingHistoryDescriptionMap.put("liquidation-insolvency-misellaneous-northern-ireland", "**Insolvency filing**");
		filingHistoryDescriptionMap.put("liquidation-court-order-insolvency-northern-ireland", "**Insolvency court order**");
		filingHistoryDescriptionMap.put("liquidation-voluntary-notice-revised-account", "**Notice of revised account**");
		filingHistoryDescriptionMap.put("liquidation-compulsory-statement-of-affairs", "**Statement of affairs**");
		filingHistoryDescriptionMap.put("liquidation-termination-of-provisional-liquidator", "**Notice of termination** of appointment of provisional liquidator");
		filingHistoryDescriptionMap.put("liquidation-voluntary-resignation-as-liquidator", "**Notice of resignation** of liquidator");
		filingHistoryDescriptionMap.put("liquidation-voluntary-removal-of-liquidator", "**Removal of liquidator**");
		filingHistoryDescriptionMap.put("liquidation-administration-notice-deemed-approval-of-proposals", "**Notice of deemed approval of proposals**");
		filingHistoryDescriptionMap.put("liquidation-early-completion-of-winding-up-northern-ireland", "**Early completion of winding up**");
		filingHistoryDescriptionMap.put("liquidation-defer-dissolution-dissolution", "**Deferment of compulsory dissolution**");
		filingHistoryDescriptionMap.put("liquidation-appointment-of-liquidator", "**Appointment of a liquidator**");
		filingHistoryDescriptionMap.put("liquidation-appointment-of-liquidator-limited-liability-partnership", "**Appointment of a liquidator**");
		filingHistoryDescriptionMap.put("liquidation-receiver-appointment-of-receiver", "**Appointment of receiver or manager**");
		filingHistoryDescriptionMap.put("liquidation-receiver-cease-to-act-receiver", "**Notice of ceasing to act as receiver or manager**");
		filingHistoryDescriptionMap.put("liquidation-receiver-appointment-of-receiver-limited-liability-partnership", "**Appointment of receiver or manager**");
		filingHistoryDescriptionMap.put("liquidation-receiver-cease-to-act-receiver-limited-liability-partnership", "**Notice of ceasing to act as receiver or manager**");
		filingHistoryDescriptionMap.put("liquidation-administration-court-order-limited-disclosure", "**Order of court** for limited disclosure of proposals");
		filingHistoryDescriptionMap.put("liquidation-statement-of-concurrence", "**Statement of concurrence**");
		filingHistoryDescriptionMap.put("liquidation-certificate-creditors-paid-in-full", "**Certificate that Creditors have been paid in full**");
		filingHistoryDescriptionMap.put("liquidation-all-constitution-of-committee", "**Notice of Constitution of Committee**");
		filingHistoryDescriptionMap.put("liquidation-disclaimer-notice", "**Notice to Registrar** of Companies of Notice of disclaimer");
		filingHistoryDescriptionMap.put("liquidation-administration-result-of-meeting-scotland", "**Notice of result of meeting** of creditors");
		filingHistoryDescriptionMap.put("liquidation-administration-insufficient-property-scotland", "**Notice of insufficient property** for distribution to unsecured creditors other than by virtue of S176A(2)(A)");
		filingHistoryDescriptionMap.put("liquidation-termination-of-winding-up-societas-europaea", "**Notice of initiation or termination of winding up** , liquidation, insolvency, cessation of payment procedures and decision to continue operating");
		filingHistoryDescriptionMap.put("liquidation-appointment-receiver-northern-ireland", "**Appointment of receiver**");
		filingHistoryDescriptionMap.put("liquidation-special-resolution-to-wind-up-northern-ireland", "**Special resolution to wind up**");
		filingHistoryDescriptionMap.put("liquidation-appointment-of-receiver-northern-ireland", "**Appointment of receiver**");
		filingHistoryDescriptionMap.put("liquidation-appointmentt-of-administrator-northern-ireland", "**Appointment of an administrator**");
		filingHistoryDescriptionMap.put("liquidation-statement-of-affairs-northern-ireland", "**Statement of affairs**");
		filingHistoryDescriptionMap.put("liquidation-administrators-proposals-northern-ireland", "**Statement of administrator's proposal**");
		filingHistoryDescriptionMap.put("liquidation-extension-of-time-northern-ireland", "**Notice of extension of time period**");
		filingHistoryDescriptionMap.put("liquidation-revised-proposals-northern-ireland", "**Statement of administrator's revised proposal**");
		filingHistoryDescriptionMap.put("liquidation-progress-report-northern-ireland-with-brought-down-date", "**Administrator's progress report** to {brought_down_date}");
		filingHistoryDescriptionMap.put("liquidation-progress-report-northern-ireland", "**Administrator's progress report**");
		filingHistoryDescriptionMap.put("liquidation-amended-certificate-creditors-committee-northern-ireland", "**Amended certificate of constitution** of creditors' committee");
		filingHistoryDescriptionMap.put("liquidation-change-in-committee-membership-northern-ireland", "**Notice of administrator's notice** of a change in committee membership");
		filingHistoryDescriptionMap.put("liquidation-order-to-deal-with-charged-property-northern-ireland", "**Notice of order to deal with charged property**");
		filingHistoryDescriptionMap.put("liquidation-automatic-end-northern-ireland", "**Notice of automatic end of Administration**");
		filingHistoryDescriptionMap.put("liquidation-automatic-end-scotland", "**Notice of automatic end of Administration**");
		filingHistoryDescriptionMap.put("liquidation-extension-of-period-northern-ireland", "**Notice of extension of period of Administration**");
		filingHistoryDescriptionMap.put("liquidation-end-of-administration-northern-ireland", "**Notice of end of Administration**");
		filingHistoryDescriptionMap.put("liquidation-court-order-ending-administration-northern-ireland", "**Notice of court order ending Administration**");
		filingHistoryDescriptionMap.put("liquidation-move-to-creditors-voluntary-liquidation-northern-ireland", "**Notice of move from Administration to Creditors Voluntary Liquidation**");
		filingHistoryDescriptionMap.put("liquidation-move-to-dissolution-northern-ireland", "**Notice to move from Administration to Dissolution**");
		filingHistoryDescriptionMap.put("liquidation-date-of-dissolution-northern-ireland", "**Notice to Registrar** in respect of date of dissolution");
		filingHistoryDescriptionMap.put("liquidation-resignation-of-administrator-northern-ireland", "**Notice of resignation of administrator**");
		filingHistoryDescriptionMap.put("liquidation-vacation-of-office-northern-ireland", "**Notice of vacation of office by administrator**");
		filingHistoryDescriptionMap.put("liquidation-appt-of-replacement-additional-adminstrator-northern-ireland", "**Appointment of replacement/additional administrator**");
		filingHistoryDescriptionMap.put("liquidation-meeting-approving-companies-voluntary-arrangement-northern-ireland", "**Notice to Registrar of voluntary arrangement** taking effect");
		filingHistoryDescriptionMap.put("liquidation-revocation-or-suspension-of-voluntary-arrangement-northern-ireland", "**Order of revocation or suspension of voluntary arrangement**");
		filingHistoryDescriptionMap.put("liquidation-supervisors-abstracts-of-receipts-payments-northern-ireland", "**Voluntary arrangement's supervisor's abstract of receipts and payments**");
		filingHistoryDescriptionMap.put("liquidation-completion-of-voluntary-arrangement-northern-ireland", "**Notice of completion of voluntary arrangement**");
		filingHistoryDescriptionMap.put("liquidation-commencement-of-moratorium-northern-ireland", "**Commencement of moratorium**");
		filingHistoryDescriptionMap.put("liquidation-extension-northern-ireland", "**Extension or further extension of moratorium**");
		filingHistoryDescriptionMap.put("liquidation-ending-of-moratorium-northern-ireland", "**End of moratorium**");
		filingHistoryDescriptionMap.put("liquidation-withdrawal-of-consent-northern-ireland", "**Notice to Registrar** by nominee of withdrawel of consent to act");
		filingHistoryDescriptionMap.put("liquidation-replacement-nominee-northern-ireland", "**Notice to Registrar** of a replacement nominee");
		filingHistoryDescriptionMap.put("liquidation-court-order-under-section-176a-northern-ireland", "**Notice to registrar** of companies in respect of order under section 176A");
		filingHistoryDescriptionMap.put("liquidation-statement-of-affairs-administrative-receiver-northern-ireland", "**Statement of Affairs** in Administrative Receivership");
		filingHistoryDescriptionMap.put("liquidation-certificate-of-constitution-creditors-northern-ireland", "**Amended certificate of constitution** of creditors' committee");
		filingHistoryDescriptionMap.put("liquidation-administrative-receivers-abstracts-northern-ireland-with-brought-down-date", "**Administrative Receiver's/Receiver Manager's abstract of receipts and payments** to {brought_down_date}");
		filingHistoryDescriptionMap.put("liquidation-administrative-receivers-abstracts-northern-ireland", "**Administrative Receiver's/Receiver Manager's abstract of receipts and payments**");
		filingHistoryDescriptionMap.put("liquidation-receiver-death-of-receiver-northern-ireland", "**Death of administrative receiver**");
		filingHistoryDescriptionMap.put("liquidation-notice-of-order-to-dispose-of-charged-property-northern-ireland", "**Notice of order to dispose of charged property**");
		filingHistoryDescriptionMap.put("liquidation-administrative-receivers-report-northern-ireland", "**Administrative Receiver's report**");
		filingHistoryDescriptionMap.put("liquidation-completion-of-winding-up-northern-ireland", "**Completion of winding up**");
		filingHistoryDescriptionMap.put("liquidation-appointment-of-provisional-liquidator-northern-ireland", "**Appointment of provisional liquidator** in winding up");
		filingHistoryDescriptionMap.put("liquidation-leave-to-resign-as-liquidator-northern-ireland", "**Order of court granting voluntary liquidator leave to resign**");
		filingHistoryDescriptionMap.put("liquidation-removal-of-liquidator-northern-ireland", "**Certificate of removal of voluntaryliquidator**");
		filingHistoryDescriptionMap.put("liquidation-certificate-creditors-paid-in-full-northern-ireland", "**Certificate that Creditors have been paid in full**");
		filingHistoryDescriptionMap.put("liquidation-appeal-against-department-northern-ireland", "**Order of Court on Appeal Against Department of Enterprise Trade and Economic Development**");
		filingHistoryDescriptionMap.put("liquidation-court-order-winding-up-northern-ireland", "**Order of court to wind up**");
		filingHistoryDescriptionMap.put("liquidation-appointment-of-liquidator-northern-ireland", "**Appointment of liquidator compulsory**");
		filingHistoryDescriptionMap.put("liquidation-resignation-as-liquidator-northern-ireland", "**Notice of resignation of liquidator compulsory**");
		filingHistoryDescriptionMap.put("liquidation-cease-to-act-as-liquidator-northern-ireland", "**Notice of ceasing to act as a voluntary liquidator**");
		filingHistoryDescriptionMap.put("liquidation-notice-of-final-meeting-of-creditors-northern-ireland", "**Notice of final meeting of creditors**");
		filingHistoryDescriptionMap.put("liquidation-death-of-liquidator-northern-ireland", "**Death of liquidator**");
		filingHistoryDescriptionMap.put("liquidation-vacation-of-liquidator-northern-ireland", "**Notice of vacation** of office by voluntary liquidator");
		filingHistoryDescriptionMap.put("liquidation-constitution-of-liquidation-committee-northern-ireland", "**Notice of Constitution of Committee**");
		filingHistoryDescriptionMap.put("liquidation-liquidation-statement-of-receipts-and-payments-northern-ireland-with-brought-down-date", "**Statement of receipts and payments** to {brought_down_date}");
		filingHistoryDescriptionMap.put("liquidation-liquidation-statement-of-receipts-and-payments-northern-ireland", "**Statement of receipts and payments**");
		filingHistoryDescriptionMap.put("liquidation-declaration-of-solvency-northern-ireland", "**Declaration of solvency**");
		filingHistoryDescriptionMap.put("liquidation-return-of-final-meeting-members-voluntary-winding-up-northern-ireland", "**Return of final meeting** in a members' voluntary winding up");
		filingHistoryDescriptionMap.put("liquidation-return-of-final-meeting-creditors-voluntary-winding-up-northern-ireland", "**Return of final meeting** in a creditors' voluntary winding up");
		filingHistoryDescriptionMap.put("liquidation-all-statement-of-concurrence", "**Statement of concurrence**");
		filingHistoryDescriptionMap.put("liquidation-in-adminstration-deemed-proposal-scotland", "**Statement of adminstrator's deemed proposal**");
		filingHistoryDescriptionMap.put("mortgage-create-with-deed-with-charles-court-order-extend-with-charge-number-charge-creation-date", "**Registration of a charge with Charles court order to extend.** Charge code {charge_number}, created on {charge_creation_date}");
		filingHistoryDescriptionMap.put("mortgage-create-with-deed-with-charge-number-charge-creation-date", "**Registration of charge** {charge_number}, created on {charge_creation_date}");
		filingHistoryDescriptionMap.put("mortgage-create-with-deed-with-charge-number", "**Registration of charge** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-create-with-deed", "**Registration of a charge**");
		filingHistoryDescriptionMap.put("mortgage-acquire-with-deed-with-charles-court-order-extend-with-charge-number-charge-acquisition-date", "**Registration of an acquisition with Charles court order to extend.** Charge code {charge_number}, acquired on {property_acquired_date}");
		filingHistoryDescriptionMap.put("mortgage-acquire-with-deed-with-court-order-extend-with-charge-number-charge-acquisition-date", "**Registration of an acquisition with court order to extend.** Charge code {charge_number}, acquired on {property_acquired_date}");
		filingHistoryDescriptionMap.put("mortgage-acquire-with-deed-with-charge-number-charge-acquisition-date", "**Registration of acquisition** {charge_number}, acquired on {property_acquired_date}");
		filingHistoryDescriptionMap.put("mortgage-acquire-with-deed-with-charge-number", "**Registration of acquisition** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-acquire-with-deed", "**Registration of an acquisition**");
		filingHistoryDescriptionMap.put("mortgage-debenture-with-deed-with-charles-court-order-extend-with-charge-number-charge-creation-date", "**Registration of a series of debentures with Charles court order to extend.** Charge code {charge_number}, created on {charge_creation_date}");
		filingHistoryDescriptionMap.put("mortgage-debenture-with-deed-with-court-order-extend-with-charge-number-charge-creation-date", "**Registration of a series of debentures with court order to extend.** Charge code {charge_number}, created on {charge_creation_date}");
		filingHistoryDescriptionMap.put("mortgage-debenture-with-deed-with-charge-number-charge-creation-date", "**Registration of a series of debentures** {charge_number}, created on {charge_creation_date}");
		filingHistoryDescriptionMap.put("mortgage-debenture-with-deed", "**Registration of a series of debentures**");
		filingHistoryDescriptionMap.put("mortgage-satisfy-charge-full-with-date", "**Satisfaction of charge** {charge_number} in full on {mortgage_satisfaction_date}");
		filingHistoryDescriptionMap.put("mortgage-satisfy-charge-full", "**Satisfaction of charge** {charge_number} in full");
		filingHistoryDescriptionMap.put("mortgage-satisfy-charge-part-with-date", "**Satisfaction of charge** {charge_number} in part on {mortgage_satisfaction_date}");
		filingHistoryDescriptionMap.put("mortgage-satisfy-charge-part", "**Satisfaction of charge** {charge_number} in part");
		filingHistoryDescriptionMap.put("mortgage-satisfy-charge", "**Satisfaction of a charge**");
		filingHistoryDescriptionMap.put("mortgage-charge-whole-release-with-charge-number-satisfaction-date", "**All of the property or undertaking has been released from charge** {charge number} on {mortgage_satisfaction_date}");
		filingHistoryDescriptionMap.put("mortgage-charge-whole-release-with-charge-number", "**All of the property or undertaking has been released from charge** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-charge-whole-cease-with-charge-number-satisfaction-date", "**All of the property or undertaking no longer forms part of charge** {charge_number} on {mortgage_satisfaction_date}");
		filingHistoryDescriptionMap.put("mortgage-charge-whole-cease-with-charge-number", "**All of the property or undertaking no longer forms part of charge** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-charge-whole-cease-and-release-with-charge-number-satisfaction-date", "**All of the property or undertaking has been released and no longer forms part of charge** {charge_number} on {mortgage_satisfaction_date}");
		filingHistoryDescriptionMap.put("mortgage-charge-whole-cease-and-release-with-charge-number", "**All of the property or undertaking has been released and no longer forms part of charge** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-charge-part-release-with-charge-number-satisfaction-date", "**Part of the property or undertaking has been released from charge** {charge_number} on {mortgage_satisfaction_date}");
		filingHistoryDescriptionMap.put("mortgage-charge-part-release-with-charge-number", "**Part of the property or undertaking has been released from charge ** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-charge-part-cease-with-charge-number-satisfaction-date", "**Part of the property or undertaking no longer forms part of charge** {charge_number} on {mortgage_satisfaction_date}");
		filingHistoryDescriptionMap.put("mortgage-charge-part-cease-with-charge-number", "**Part of the property or undertaking no longer forms part of charge** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-charge-part-cease-and-release-with-charge-number-satisfaction-date", "**Part of the property or undertaking has been released and no longer forms part of charge** {charge_number} on {mortgage_satisfaction_date}");
		filingHistoryDescriptionMap.put("mortgage-charge-part-both-with-charge-number", "**Part of the property or undertaking has been released and no longer forms part of charge** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-release-cease-charge", "**Property or undertaking has been released or no longer forms part of the charge**");
		filingHistoryDescriptionMap.put("mortgage-trustee-acting-as", "**Statement of company acting as a trustee on charge** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-alter-charge-with-charge-number-charge-creation-date", "**Alteration to charge** {charge_number}, created on {charge_creation_date}");
		filingHistoryDescriptionMap.put("mortgage-alter-charge-with-charge-number", "**Alteration to charge** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-alter-charge", "**Alteration to a charge**");
		filingHistoryDescriptionMap.put("mortgage-create-without-deed-with-charles-court-order-extend-with-charge-number-charge-creation-date", "**Registration of a charge with Charles court order to extend.** Charge code {charge_number}, created on {charge_creation_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-create-without-deed-with-court-order-extend-with-charge-number-charge-creation-date", "**Registration of a charge with court order to extend.** Charge code {charge_number}, created on {charge_creation_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-create-without-deed-with-charge-number-charge-creation-date", "**Registration of charge** {charge_number}, created on {charge_creation_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-create-without-deed", "**Registration of a charge without deed**");
		filingHistoryDescriptionMap.put("mortgage-acquire-without-deed-with-charles-court-order-extend-with-charge-number-charge-acquisition-date", "**Registration of an acquisition with Charles court order to extend** {charge_number}, acquired on {property_acquired_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-acquire-without-deed-with-court-order-extend-with-charge-number-charge-acquisition-date", "**Registration of an acquisition with court order to extend ** {charge_number}, acquired on {property_acquired_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-acquire-without-deed-with-charge-number-charge-creation-date", "**Registration of acquisition** {charge_number}, acquired on {property_acquired_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-acquire-without-deed", "**Registration of an acquisition without deed**");
		filingHistoryDescriptionMap.put("mortgage-debenture-without-deed-with-charles-court-order-extend-with-charge-number-charge-creation-date", "**Registration of a series of debentures with Charles court order to extend.** Charge code {charge_number}, created on {charge_creation_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-debenture-without-deed-with-court-order-extend-with-charge-number-charge-creation-date", "**Registration of a series of debentures with court order to extend.** Charge code {charge_number}, created on {charge_creation_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-debenture-without-deed-with-charge-number-charge-creation-date", "**Registration of a series of debentures** {charge_number}, created on {charge_creation_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-debenture-without-deed", "**Registration of a series of debentures without deed**");
		filingHistoryDescriptionMap.put("mortgage-create-with-deed-with-charles-court-order-extend-with-charge-number-charge-creation-date-limited-liability-partnership", "**Registration of a charge with Charles court order to extend.** Charge code {charge_number}, created on {charge_creation_date}");
		filingHistoryDescriptionMap.put("mortgage-create-with-deed-with-court-order-extend-with-charge-number-charge-creation-date-limited-liability-partnership", "**Registration of a charge with court order to extend.** Charge code {charge_number}, created on {charge_creation_date}");
		filingHistoryDescriptionMap.put("mortgage-create-with-deed-with-charge-number-charge-creation-date-limited-liability-partnership", "**Registration of charge** {charge_number}, created on {charge_creation_date}");
		filingHistoryDescriptionMap.put("mortgage-create-with-deed-with-charge-number-limited-liability-partnership", "**Registration of charge** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-create-with-deed-limited-liability-partnership", "**Registration of a charge**");
		filingHistoryDescriptionMap.put("mortgage-acquire-with-deed-with-charles-court-order-extend-with-charge-number-charge-acquisition-date-limited-liability-partnership", "**Registration of an acquisition with Charles court order to extend.** Charge code {charge_number}, acquired on {property_acquired_date}");
		filingHistoryDescriptionMap.put("mortgage-acquire-with-deed-with-court-order-extend-with-charge-number-charge-acquisition-date-limited-liability-partnership", "**Registration of an acquisition with court order to extend.** Charge code {charge_number}, acquired on {property_acquired_date}");
		filingHistoryDescriptionMap.put("mortgage-acquire-with-deed-with-charge-number-charge-acquisition-date-limited-liability-partnership", "**Registration of acquisition** {charge_number}, acquired on {property_acquired_date}");
		filingHistoryDescriptionMap.put("mortgage-acquire-with-deed-with-charge-number-limited-liability-partnership", "**Registration of acquisition** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-acquire-with-deed-limited-liability-partnership", "**Registration of an acquisition**");
		filingHistoryDescriptionMap.put("mortgage-debenture-with-deed-with-charles-court-order-extend-with-charge-number-charge-creation-date-limited-liability-partnership", "**Registration of a series of debentures with Charles court order to extend.** Charge code {charge_number}, created on {charge_creation_date}");
		filingHistoryDescriptionMap.put("mortgage-debenture-with-deed-with-court-order-extend-with-charge-number-charge-creation-date-limited-liability-partnership", "**Registration of a series of debentures with court order to extend.** Charge code {charge_number}, created on {charge_creation_date}");
		filingHistoryDescriptionMap.put("mortgage-debenture-with-deed-with-charge-number-charge-creation-date-limited-liability-partnership", "**Registration of a series of debentures** {charge_number}, created on {charge_creation_date}");
		filingHistoryDescriptionMap.put("mortgage-debenture-with-deed-with-charge-number-limited-liability-partnership", "**Registration of a series of debentures** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-debenture-with-deed-limited-liability-partnership", "**Registration of a series of debentures**");
		filingHistoryDescriptionMap.put("mortgage-satisfy-charge-full-with-mortgage-satisfaction-date-limited-liability-partnership", "**Satisfaction of charge** {charge_number} in full on {mortgage_satisfaction_date}");
		filingHistoryDescriptionMap.put("mortgage-satisfy-charge-full-limited-liability-partnership", "**Satisfaction of charge** {charge_number} in full");
		filingHistoryDescriptionMap.put("mortgage-satisfy-charge-part-with-mortgage-satisfaction-date-limited-liability-partnership", "**Satisfaction of charge** {charge_number} in part on {mortgage_satisfaction_date}");
		filingHistoryDescriptionMap.put("mortgage-satisfy-charge-part-limited-liability-partnership", "**Satisfaction of charge** {charge_number} in part");
		filingHistoryDescriptionMap.put("mortgage-satisfy-charge-limited-liability-partnership", "**Satisfaction of a charge**");
		filingHistoryDescriptionMap.put("mortgage-charge-whole-release-with-charge-number-satisfaction-date-limited-liability-partnership", "**All of the property or undertaking has been released from charge** {charge_number} on {mortgage_satisfaction_date}");
		filingHistoryDescriptionMap.put("mortgage-charge-whole-release-with-charge-number-limited-liability-partnership", "**All of the property or undertaking has been released from charge** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-charge-whole-cease-with-charge-number-satisfaction-date-limited-liability-partnership", "**All of the property or undertaking no longer forms part of charge** {charge_number} on {mortgage_satisfaction_date}");
		filingHistoryDescriptionMap.put("mortgage-charge-whole-cease-with-charge-number-limited-liability-partnership", "**All of the property or undertaking no longer forms part of charge** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-charge-whole-cease-and-release-with-charge-number-satisfaction-date-limited-liability-partnership", "**All of the property or undertaking has been released and no longer forms part of charge** {charge_number} on {mortgage_satisfaction_date}");
		filingHistoryDescriptionMap.put("mortgage-charge-whole-cease-and-release-with-charge-number-limited-liability-partnership", "**All of the property or undertaking has been released and no longer forms part of charge** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-charge-part-release-with-charge-number-satisfaction-date-limited-liability-partnership", "**Part of the property or undertaking has been released from charge** {charge_number} on {mortgage_satisfaction_date}");
		filingHistoryDescriptionMap.put("mortgage-charge-part-release-with-charge-number-limited-liability-partnership", "**Part of the property or undertaking has been released from charge** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-charge-part-cease-with-charge-number-satisfaction-date-limited-liability-partnership", "**Part of the property or undertaking no longer forms part of charge** {charge_number} on {mortgage_satisfaction_date}");
		filingHistoryDescriptionMap.put("mortgage-charge-part-cease-with-charge-number-limited-liability-partnership", "**Part of the property or undertaking no longer forms part of charge** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-charge-part-cease-and-release-with-charge-number-satisfaction-date-limited-liability-partnership", "**Part of the property or undertaking has been released and no longer forms part of charge** {charge_number} on {mortgage_satisfaction_date}");
		filingHistoryDescriptionMap.put("mortgage-charge-part-cease-and-release-with-charge-number-limited-liability-partnership", "**Part of the property or undertaking has been released and no longer forms part of charge** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-release-cease-charge-limited-liability-partnership", "**Property or undertaking has been released or no longer forms part of the charge**");
		filingHistoryDescriptionMap.put("mortgage-trustee-acting-as-trustee-with-charge-number-limited-liability-partnership", "**Statement of company acting as a trustee** on charge {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-trustee-acting-as-trustee-limited-liability-partnership", "**Statement of company acting as a trustee**");
		filingHistoryDescriptionMap.put("mortgage-alter-post-to-charge-with-charge-number-limited-liability-partnership", "**Alteration to charge** {charge_number}, created on {charge_creation_date}");
		filingHistoryDescriptionMap.put("mortgage-alter-post-to-charge-limited-liability-partnership", "**Alteration to a charge** , created on {charge_creation_date}");
		filingHistoryDescriptionMap.put("mortgage-create-without-deed-with-charles-court-order-extend-with-charge-number-charge-creation-date-limited-liability-partnership", "**Registration of a charge with Charles court order to extend.** Charge code {charge_number}, created on {charge_creation_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-create-without-deed-with-court-order-extend-charge-number-charge-creation-date-limited-liability-partnership", "**Registration of a charge with court order to extend.** Charge code {charge_number}, created on {charge_creation_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-create-without-deed-with-charge-number-charge-creation-date-limited-liability-partnership", "**Registration of charge** {charge_number}, created on {charge_creation_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-create-without-deed-with-charge-number-limited-liability-partnership", "**Registration of charge** {charge_number} without deed");
		filingHistoryDescriptionMap.put("mortgage-create-without-deed-limited-liability-partnership", "**Registration of a charge without deed");
		filingHistoryDescriptionMap.put("mortgage-acquire-without-deed-with-charles-court-order-extend-with-charge-number-charge-acquisition-date-limited-liability-partnership", "**Registration of an acquisition with Charles court order to extend.** Charge code {charge_number}, acquired on {property_acquired_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-acquire-without-deed-with-court-order-extend-charge-number-charge-acquisition-date-limited-liability-partnership", "**Registration of an acquisition with court order to extend.** Charge code {charge_number}, acquired on {property_acquired_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-acquire-without-deed-with-charge-number-charge-creation-date-limited-liability-partnership", "**Registration of acquisition** {charge_number}, acquired on {property_acquired_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-acquire-without-deed-limited-liability-partnership", "**Registration of an acquisition without deed**");
		filingHistoryDescriptionMap.put("mortgage-debenture-without-deed-with-charles-court-order-extend-with-charge-number-charge-creation-date-limited-liability-partnership", "**Registration of a series of debentures with Charles court order to extend.** Charge code {charge_number}, created on {charge_creation_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-debenture-without-deed-with-court-order-extend-with-charge-number-charge-creation-date-limited-liability-partnership", "**Registration of a series of debentures with court order to extend.** Charge code {charge_number}, created on {charge_creation_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-debenture-without-deed-with-charge-number-charge-creation-date-limited-liability-partnership", "**Registration of a series of debentures** {charge_number}, created on {charge_creation_date} without deed");
		filingHistoryDescriptionMap.put("mortgage-debenture-without-deed-limited-liability-partnership", "**Registration of a series of debentures without deed**");
		filingHistoryDescriptionMap.put("mortgage-alter-floating-charge-with-number-date", "**Alterations to floating charge** {charge_number}, created on {charge_creation_date}");
		filingHistoryDescriptionMap.put("mortgage-alter-floating-charge-with-number", "**Alterations to floating charge** {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-alter-floating-charge", "**Alterations to a floating charge**");
		filingHistoryDescriptionMap.put("mortgage-resolution", "**Mortgage miscellaneous resolution** for charge");
		filingHistoryDescriptionMap.put("mortgage-court-order", "**Court order mortgage** miscellaneous for charge");
		filingHistoryDescriptionMap.put("mortgage-miscellaneous", "**Mortgage miscellaneous** for charge");
		filingHistoryDescriptionMap.put("mortgage-rectification-order", "**Rectification order** for charge {charge_number}");
		filingHistoryDescriptionMap.put("mortgage-alteration-floating-charge-scotland-limited-liability-partnership", "**Alteration to floating charge** {charge_number}, created on {charge_creation_date}");
		filingHistoryDescriptionMap.put("mortgage-deed", "**Charge deed**");
		filingHistoryDescriptionMap.put("ordinary-resolution-adopt-memorandum", "**Ordinary resolution of adoption of Memorandum of Association**");
		filingHistoryDescriptionMap.put("ordinary-resolution-alteration-memorandum", "**Ordinary resolution of alteration of Memorandum of Association**");
		filingHistoryDescriptionMap.put("ordinary-resolution-memorandum", "**Ordinary resolution of Memorandum of Association**");
		filingHistoryDescriptionMap.put("ordinary-resolution-exemption", "**Ordinary resolution of exemption from the Appointing of Auditors**");
		filingHistoryDescriptionMap.put("ordinary-resolution-increase-capital", "**Ordinary resolution of increasing authorised share capital**");
		filingHistoryDescriptionMap.put("ordinary-resolution-decrease-capital", "**Ordinary resolution of decreasing authorised share capital**");
		filingHistoryDescriptionMap.put("ordinary-resolution-reduction-capital", "**Ordinary resolution of reduction in issued share capital**");
		filingHistoryDescriptionMap.put("ordinary-resolution-acquisition", "**Ordinary resolution of financial assistance for the acquisition of shares**");
		filingHistoryDescriptionMap.put("ordinary-resolution-purchase-shares", "**Ordinary resolution of authority to purchase own shares out of capital**");
		filingHistoryDescriptionMap.put("ordinary-resolution-purchase-number-shares", "**Ordinary resolution of authority to purchase a number of shares**");
		filingHistoryDescriptionMap.put("ordinary-resolution-securities", "**Ordinary resolution of allotment of securities**");
		filingHistoryDescriptionMap.put("ordinary-resolution-removal-pre-emption", "**Ordinary resolution of removal of pre-emption rights**");
		filingHistoryDescriptionMap.put("ordindary-resolution-varying-share-rights", "**Ordinary resolution of varying share rights or name**");
		filingHistoryDescriptionMap.put("ordinary-resolution", "**Ordinary resolution**");
		filingHistoryDescriptionMap.put("ordinary-resolution-capitalisation", "**Ordinary resolution of capitalisation or a bonus issue of shares**");
		filingHistoryDescriptionMap.put("ordinary-resolution-change-of-name", "**Ordinary resolution of change of name**");
		filingHistoryDescriptionMap.put("ordinary-resolution-redeem-shares", "**Ordinary resolution of redemption of redeemable shares**");
		filingHistoryDescriptionMap.put("special-resolution-adopt-memorandum", "**Special resolution of adoption of Memorandum of Association**");
		filingHistoryDescriptionMap.put("special-resolution-alteration-memorandum", "**Special resolution of alteration of Memorandum of Association**");
		filingHistoryDescriptionMap.put("special-resolution-memorandum", "**Special resolution of Memorandum of Association**");
		filingHistoryDescriptionMap.put("special-resolution-re-registration", "**Special resolution of re-registration**");
		filingHistoryDescriptionMap.put("special-resolution-exemption", "**Special resolution of exemption from the Appointing of Auditors**");
		filingHistoryDescriptionMap.put("special-resolution-increase-capital", "**Special resolution of increasing authorised share capital**");
		filingHistoryDescriptionMap.put("special-resolution-decrease-capital", "**Special resolution of decreasing authorised share capital**");
		filingHistoryDescriptionMap.put("special-resolution-reduction-capital", "**Special resolution of reduction in issued share capital**");
		filingHistoryDescriptionMap.put("special-resolution-acquisition", "**Special resolution of financial assistance for the acquisition of shares**");
		filingHistoryDescriptionMap.put("special-resolution-purchase-shares", "**Special resolution of authority to purchase own shares out of capital**");
		filingHistoryDescriptionMap.put("special-resolution-purchase-number-shares", "**Special resolution of authority to purchase a number of shares**");
		filingHistoryDescriptionMap.put("special-resolution-securities", "**Special resolution of allotment of securities**");
		filingHistoryDescriptionMap.put("special-resolution-removal-pre-emption", "**Special resolution of removal of pre-emption rights**");
		filingHistoryDescriptionMap.put("special-resolution-varying-share-rights", "**Special resolution of varying share rights or name**");
		filingHistoryDescriptionMap.put("special-resolution", "**Special resolution**");
		filingHistoryDescriptionMap.put("special-resolution-capitalisation", "**Special resolution of capitalisation or a bonus issue of shares**");
		filingHistoryDescriptionMap.put("special-resolution-redeem-shares", "**Special resolution of redemption of redeemable shares**");
		filingHistoryDescriptionMap.put("written-resolution-adopt-memorandum", "**Written resolution of adoption of Memorandum of Association**");
		filingHistoryDescriptionMap.put("written-resolution-alteration-memorandum", "**Written resolution of alteration of Memorandum of Association**");
		filingHistoryDescriptionMap.put("written-resolution-memorandum", "**Written resolution of Memorandum of Association**");
		filingHistoryDescriptionMap.put("written-resolution-re-registration", "**Written resolution of re-registration**");
		filingHistoryDescriptionMap.put("written-resolution-exemption", "**Written resolution of exemption from the Appointing of Auditors**");
		filingHistoryDescriptionMap.put("written-resolution-increase-capital", "**Written resolution of increasing authorised share capital**");
		filingHistoryDescriptionMap.put("written-resolution-decrease-capital", "**Written resolution of decreasing authorised share capital**");
		filingHistoryDescriptionMap.put("written-resolution-reduction-capital", "**Written resolution of reduction in issued share capital**");
		filingHistoryDescriptionMap.put("written-resolution-acquisition", "**Written resolution of financial assistance for the acquisition of shares**");
		filingHistoryDescriptionMap.put("written-resolution-purchase-shares", "**Written resolution of authority to purchase own shares out of capital**");
		filingHistoryDescriptionMap.put("written-resolution-purchase-number-shares", "**Written resolution of authority to purchase a number of shares**");
		filingHistoryDescriptionMap.put("written-resolution-securities", "**Written resolution of allotment of securities**");
		filingHistoryDescriptionMap.put("written-resolution-removal-pre-emption", "**Written resolution of removal of pre-emption rights**");
		filingHistoryDescriptionMap.put("written-resolution-varying-share-rights", "**Written resolution of varying share rights or name**");
		filingHistoryDescriptionMap.put("written-resolution", "**Written resolution**");
		filingHistoryDescriptionMap.put("written-resolution-capitalisation", "**Written resolution of capitalisation or a bonus issue of shares**");
		filingHistoryDescriptionMap.put("written-resolution-change-of-name", "**Written resolution of change of name**");
		filingHistoryDescriptionMap.put("written-resolution-redeem-shares", "**Written resolution of redemption of redeemable shares**");
		filingHistoryDescriptionMap.put("elective-resolution", "**Elective resolution**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-adopt-memorandum", "**Extraordinary resolution of adoption of Memorandum of Association**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-alteration-memorandum", "**Extraordinary resolution of alteration of Memorandum of Association**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-memorandum", "**Extraordinary resolution of Memorandum of Association**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-re-registration", "**Extraordinary resolution of re-registration**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-exemption", "**Extraordinary resolution of exemption from the Appointing of Auditors**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-increase-capital", "**Extraordinary resolution of increasing authorised share capital**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-decrease-capital", "**Extraordinary resolution of decreasing authorised share capital**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-reduction-capital", "**Extraordinary resolution of reduction in issued share capital**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-acquisition", "**Extraordinary resolution of financial assistance for the acquisition of shares**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-purchase-shares", "**Extraordinary resolution of authority to purchase own shares out of capital**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-purchase-number-shares", "**Extraordinary resolution of authority to purchase a number of shares**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-securities", "**Extraordinary resolution of allotment of securities**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-removal-pre-emption", "**Extraordinary resolution of removal of pre-emption rights**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-varying-share-rights", "**Extraordinary resolution of varying share rights or name**");
		filingHistoryDescriptionMap.put("extraordinary-resolution", "**Extraordinary resolution**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-capitalisation", "**Extraordinary resolution of capitalisation or a bonus issue of shares**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-change-of-name", "**Extraordinary resolution of change of name**");
		filingHistoryDescriptionMap.put("extraordinary-resolution-redeem-shares", "**Extraordinary resolution of redemption of redeemable shares**");
		filingHistoryDescriptionMap.put("resolution", "**Resolutions**");
		filingHistoryDescriptionMap.put("resolution-adopt-memorandum-and-articles", "**Resolution of adoption of Memorandum and/or Articles of Association**");
		filingHistoryDescriptionMap.put("resolution-adopt-memorandum", "**Resolution of adoption of Memorandum of Association**");
		filingHistoryDescriptionMap.put("resolution-adopt-articles", "**Resolution of adoption of Articles of Association**");
		filingHistoryDescriptionMap.put("resolution-alteration-memorandum-and-articles", "**Resolution of alteration of Memorandum and/or Articles of Association**");
		filingHistoryDescriptionMap.put("resolution-alteration-memorandum", "**Resolution of alteration of Memorandum of Association**");
		filingHistoryDescriptionMap.put("resolution-alteration-articles", "**Resolution of alteration of Articles of Association**");
		filingHistoryDescriptionMap.put("resolution-memorandum-and-articles", "**Resolution of Memorandum and/or Articles of Association**");
		filingHistoryDescriptionMap.put("resolution-memorandum", "**Resolution of Memorandum and/or Articles of Association**");
		filingHistoryDescriptionMap.put("resolution-re-registration", "**Resolution of re-registration**");
		filingHistoryDescriptionMap.put("resolution-exemption", "**Resolution of exemption from the Appointing of Auditors**");
		filingHistoryDescriptionMap.put("resolution-increase-capital", "**Resolution of increasing authorised share capital**");
		filingHistoryDescriptionMap.put("resolution-decrease-capital", "**Resolution of decreasing authorised share capital**");
		filingHistoryDescriptionMap.put("resolution-reduction-capital", "**Resolution of reduction in issued share capital**");
		filingHistoryDescriptionMap.put("resolution-acquisition", "**Resolution of financial assistance for the acquisition of shares**");
		filingHistoryDescriptionMap.put("resolution-purchase-shares", "**Resolution of authority to purchase own shares out of capital**");
		filingHistoryDescriptionMap.put("resolution-purchase-number-shares", "**Resolution of authority to purchase a number of shares**");
		filingHistoryDescriptionMap.put("resolution-securities", "**Resolution of allotment of securities**");
		filingHistoryDescriptionMap.put("resolution-removal-pre-emption", "**Resolution of removal of pre-emption rights**");
		filingHistoryDescriptionMap.put("resolution-varying-share-rights", "**Resolution of varying share rights or name**");
		filingHistoryDescriptionMap.put("resolution-capitalisation", "**Resolution of capitalisation or a bonus issue of shares**");
		filingHistoryDescriptionMap.put("resolution-change-of-name", "**Change company name resolution on {resolution_date}**");
		filingHistoryDescriptionMap.put("resolution-redeem-shares", "**Resolution of redemption of redeemable shares**");
		filingHistoryDescriptionMap.put("resolution-redonominate-shares", "**Resolution to redenominate shares**");
		filingHistoryDescriptionMap.put("resolution-reduce-capital", "**Resolution to reduce share capital on re-denomination**");
		filingHistoryDescriptionMap.put("certificate-change-of-name-limited-partnership", "**Certificate of change of name** of a Limited Partnership");
		filingHistoryDescriptionMap.put("certificate-capital-iron-steel-act-reduction-issed-capital", "**Certificate of Iron & Steel Act 1985 reduction of issued capital**");
		filingHistoryDescriptionMap.put("certificate-capital-reduction-issued-capital", "**Certificate of reduction of issued capital**");
		filingHistoryDescriptionMap.put("certificate-capital-reduction-issued-capital-share-premium", "**Certificate of reduction of issued capital and share premium**");
		filingHistoryDescriptionMap.put("certificate-capital-reduction-issued-capital-share-premium-cancellation-share-premiumn", "**Certificate of reduction of issued capital** and share premium and cancellation of share premium");
		filingHistoryDescriptionMap.put("certificate-capital-reduction-issued-capital-cancellation-share-premium-cancellation-capital-redemption-reserve", "**Certificate of reduction of issued capital** and share premium and cancellation of share premium and capital redemption reserve");
		filingHistoryDescriptionMap.put("certificate-capital-reduction-share-premium", "**Certificate of reduction of share premium**");
		filingHistoryDescriptionMap.put("certificate-capital-reduction-share-premium-cancellation-capital-redemption-reserve", "**Certificate of reduction of share premium** and cancellation of capital redemption reserve");
		filingHistoryDescriptionMap.put("certificate-capital-cancellation-share-premium-account", "**Certificate of cancellation of share premium account**");
		filingHistoryDescriptionMap.put("certificate-re-registration-change-of-name", "**Certificate of re-registration** and or change of name");
		filingHistoryDescriptionMap.put("certificate-re-registration-unlimited-to-limited", "**Certificate of re-registration from Unlimited to Limited**");
		filingHistoryDescriptionMap.put("certificate-re-registration-public-limited-company-to-private", "**Certificate of re-registration from Public Limited Company to Private**");
		filingHistoryDescriptionMap.put("certificate-change-of-name-re-registration-public-limited-company-to-private", "**Certificate of change of name and re-registration from Public Limited Company to Private**");
		filingHistoryDescriptionMap.put("certificate-change-of-name-re-registration-to-limited", "**Certificate of change of name and re-registration to Limited**");
		filingHistoryDescriptionMap.put("certificate-re-registration-old-public-company-to-public-limited-company", "**Certificate of re-registration of an Old Public Company to Public Limited Company**");
		filingHistoryDescriptionMap.put("certificate-change-of-name-re-registration-old-public-company-to-public-limited-company", "**Certificate of change of name and re-registration from old Public Company to Public Limited Company**");
		filingHistoryDescriptionMap.put("certificate-re-registration-limited-to-unlimited", "**Certificate of re-registration from Limited to Unlimited**");
		filingHistoryDescriptionMap.put("certificate-change-of-name-re-registration-to-unlimited", "**Certificate of change of name and re-registration to Unlimited**");
		filingHistoryDescriptionMap.put("certificate-re-registration-private-to-public-limited-company", "**Certificate of re-registration from Private to Public Limited Company**");
		filingHistoryDescriptionMap.put("certificate-re-registration-unlimited-to-public-limited-company", "**Certificate of re-registration from Unlimited to Public Limited Company**");
		filingHistoryDescriptionMap.put("certificate-change-of-name-re-registration-private-to-public-limited-company", "**Certificate of change of name and re-registration from Private to Public Limited Company**");
		filingHistoryDescriptionMap.put("certificate-authorisation-to-commence-business-borrow", "**Certificate of authorisation to commence business and borrow**");
		filingHistoryDescriptionMap.put("certificate-re-registration-old-public-company-to-private-limited-company", "**Certificate of re-registration of an Old Public Company to Private**");
		filingHistoryDescriptionMap.put("certificate-incorporation-foreign-private-act", "**Certificate of foreign incorporation** - Private Act");
		filingHistoryDescriptionMap.put("certificate-incorporation", "**Certificate of Incorporation**");
		filingHistoryDescriptionMap.put("certificate", "**Certificate**");
		filingHistoryDescriptionMap.put("certificate-registration-limited-partnership", "**Certificate of registration of a Limited Partnership**");
		filingHistoryDescriptionMap.put("certificate-registration-friendly-society", "**Certificate of registration of a Friendly Society**");
		filingHistoryDescriptionMap.put("certificate-change-of-name-company", "**Certificate of change of name**");
		filingHistoryDescriptionMap.put("gazette-filings-brought-up-to-date", "**Compulsory strike-off action has been discontinued**");
		filingHistoryDescriptionMap.put("gazette-notice-voluntary", "**First Gazette** notice for voluntary strike-off");
		filingHistoryDescriptionMap.put("gazette-dissolved-voluntary", "**Final Gazette** dissolved via voluntary strike-off");
		filingHistoryDescriptionMap.put("gazette-notice-compulsary", "**First Gazette** notice for compulsory strike-off");
		filingHistoryDescriptionMap.put("gazette-notice-compulsory", "**First Gazette** notice for compulsory strike-off");
		filingHistoryDescriptionMap.put("gazette-dissolved-compulsary", "**Final Gazette** dissolved via compulsory strike-off");
		filingHistoryDescriptionMap.put("gazette-dissolved-compulsory", "**Final Gazette** dissolved via compulsory strike-off");
		filingHistoryDescriptionMap.put("miscellaneous", "Miscellaneous");
		filingHistoryDescriptionMap.put("application-to-court-to-cancel-bearer-shares", "**Application to court to cancel bearer shares**");
		filingHistoryDescriptionMap.put("court-order", "**Court order**");
		filingHistoryDescriptionMap.put("bona-vacantia-company", "**Bona Vacantia disclaimer**");
		filingHistoryDescriptionMap.put("bona-vacantia-limited-liability-partnership", "**Bona Vacantia disclaimer**");
		filingHistoryDescriptionMap.put("administrative-restoration-company", "**Administrative restoration application**");
		filingHistoryDescriptionMap.put("administrative-restoration-limited-liability-partnership", "**Administrative restoration application**");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-dormant", "**Accounts for a dormant company** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-full", "**Full accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-full-group", "**Full group accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-initial", "**Initial accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-interim", "**Interim accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-group", "**Group of companies' accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-medium", "**Accounts for a medium company** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-medium-group", "**Group accounts for a medium company** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-small", "**Accounts for a small company** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-small-group", "**Group accounts for a small company** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-micro-entity", "**Micro company accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-partial-exemption", "**Partial exemption accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-total-exemption-full", "**Total exemption full accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-total-exemption-small", "**Total exemption small company accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-audit-exemption-subsiduary", "**Audit exemption subsidiary accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-with-made-up-date", "**Accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts", "**Accounts**");
		filingHistoryDescriptionMap.put("accounts-amended-with-accounts-type-dormant", "**Amended accounts for a dormant company** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-amended-with-accounts-type-full", "**Amended full accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-amended-with-accounts-type-full-group", "**Amended full group accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-amended-with-accounts-type-initial", "**Amended initial accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-amended-with-accounts-type-interim", "**Amended interim accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-amended-with-accounts-type-group", "**Amended group of companies' accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-amended-with-accounts-type-medium", "**Amended accounts for a medium company** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-amended-with-accounts-type-medium-group", "**Amended group accounts for a medium company** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-amended-with-accounts-type-small", "**Amended accounts for a small company** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-amended-with-accounts-type-small-group", "**Amended group accounts for a small company** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-amended-with-accounts-type-micro-entity", "**Amended micro company accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-amended-with-accounts-type-partial-exemption", "**Amended partial exemption accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-amended-with-accounts-type-total-exemption-full", "**Amended total exemption full accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-amended-with-accounts-type-total-exemption-small", "**Amended total exemption small company accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-amended-with-accounts-type-audit-exemption-subsiduary", "**Amended audit exemption subsidiary accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-amended-with-made-up-date", "**Amended accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-amended", "**Amended accounts**");
		filingHistoryDescriptionMap.put("change-account-reference-date-company-previous-extended", "**Previous accounting period extended** from {made_up_date} to {new_date}");
		filingHistoryDescriptionMap.put("change-account-reference-date-company-previous-shortened", "**Previous accounting period shortened** from {made_up_date} to {new_date}");
		filingHistoryDescriptionMap.put("change-account-reference-date-company-current-extended", "**Current accounting period extended** from {made_up_date} to {new_date}");
		filingHistoryDescriptionMap.put("change-account-reference-date-company-current-shortened", "**Current accounting period shortened** from {made_up_date} to {new_date}");
		filingHistoryDescriptionMap.put("change-account-reference-date-company", "**Change of accounting reference date**");
		filingHistoryDescriptionMap.put("accounts-dormant-company", "**Dormant company accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("change-account-reference-date-limited-liability-partnership-previous-extended", "**Previous accounting period extended** from {made_up_date} to {new_date}");
		filingHistoryDescriptionMap.put("change-account-reference-date-limited-liability-partnership-previous-shortened", "**Previous accounting period shortened** from {made_up_date} to {new_date}");
		filingHistoryDescriptionMap.put("change-account-reference-date-limited-liability-partnership-current-extended", "**Current accounting period extended** from {made_up_date} to {new_date}");
		filingHistoryDescriptionMap.put("change-account-reference-date-limited-liability-partnership-current-shortened", "**Current accounting period shortened** from {made_up_date} to {new_date}");
		filingHistoryDescriptionMap.put("change-account-reference-date-limited-liability-partnership", "**Change of accounting reference date**");
		filingHistoryDescriptionMap.put("accounts-balance-sheet", "**Balance Sheet**");
		filingHistoryDescriptionMap.put("annual-return-limited-liability-partnership-with-made-up-date", "**Annual return** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("annual-return-limited-liability-partnership", "**Annual return**");
		filingHistoryDescriptionMap.put("annual-return-company-with-made-up-date", "**Annual return** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("annual-return-company-with-made-up-date-full-list-shareholders", "**Annual return** made up to {made_up_date} with full list of shareholders");
		filingHistoryDescriptionMap.put("annual-return-company-with-made-up-date-bulk-list-shareholders", "**Annual return** made up to {made_up_date} with bulk list of shareholders");
		filingHistoryDescriptionMap.put("annual-return-company-with-made-up-date-changes-to-shareholders", "**Annual return** made up to {made_up_date}. List of shareholders has changed");
		filingHistoryDescriptionMap.put("annual-return-company-with-made-up-date-bearer-shares", "**Annual return** made up to {made_up_date} with bearer shares");
		filingHistoryDescriptionMap.put("annual-return-company-with-made-up-date-no-shareholders-list", "**Annual return** made up to {made_up_date}, no shareholder list provided");
		filingHistoryDescriptionMap.put("annual-return-company-with-made-up-date-no-member-list", "**Annual return** made up to {made_up_date} no member list");
		filingHistoryDescriptionMap.put("annual-return-company", "**Annual return**");
		filingHistoryDescriptionMap.put("annual-return-newspaper", "**Annual return**");
		filingHistoryDescriptionMap.put("annual-return-overseas-company", "**Transitional return** by a UK establishment of an overseas company");
		filingHistoryDescriptionMap.put("annual-return-add-person-authorised-to-represent-to-uk-establishment", "**Transitional return** for **{branch_number}** - person authorised to represent, {representative_details}");
		filingHistoryDescriptionMap.put("annual-return-add-person-authorised-to-accept-service-to-uk-establishment", "**Transitional return** for **{branch_number}** - person authorised to accept service, {representative_details}");
		filingHistoryDescriptionMap.put("annual-return-add-person-to-uk-establisment", "**Transitional return** - {representative_details}");
		filingHistoryDescriptionMap.put("annual-return-update-with-change-details", "**Transitional return** for **{branch_number}** - Changes made to the UK establishment, {representative_details}");
		filingHistoryDescriptionMap.put("annual-return-update-details", "**Transitional return** - {representative_details}");
		filingHistoryDescriptionMap.put("auditors-resignation-company", "**Auditor's resignation**");
		filingHistoryDescriptionMap.put("auditors-report", "**Auditor's report**");
		filingHistoryDescriptionMap.put("auditors-statement", "**Auditor's statement**");
		filingHistoryDescriptionMap.put("auditors-resignation-limited-liability-partnership", "**Resignation of an auditor**");
		filingHistoryDescriptionMap.put("auditors-resignation-limited-company", "**Resignation of an auditor**");
		filingHistoryDescriptionMap.put("statement-guarantee-by-parent-undertaking-of-subsidiary-company", "**Statement of guarantee** by a parent undertaking of a subsidiary company");
		filingHistoryDescriptionMap.put("statement-guarantee-by-parent-undertaking-of-subsidiary-limited-liability-partnership", "**Statement of guarantee** by a parent undertaking of a subsidiary Limited Liability Partnership");
		filingHistoryDescriptionMap.put("miscellaneous-limited-liability-partnership", "Miscellaneous");
		filingHistoryDescriptionMap.put("appoint-person-director-company-with-name-date", "**Appointment** of {officer_name} as a director on {appointment_date}");
		filingHistoryDescriptionMap.put("appoint-person-director-company-with-name", "**Appointment** of {officer_name} as a director");
		filingHistoryDescriptionMap.put("appoint-person-director-company", "**Appointment** of a director");
		filingHistoryDescriptionMap.put("appoint-person-secretary-company-with-name-date", "**Appointment** of {officer_name} as a secretary on {appointment_date}");
		filingHistoryDescriptionMap.put("appoint-person-secretary-company-with-name", "**Appointment** of {officer_name} as a secretary");
		filingHistoryDescriptionMap.put("appoint-person-secretary-company", "**Appointment** of a secretary");
		filingHistoryDescriptionMap.put("appoint-corporate-director-company-with-name-date", "**Appointment** of {officer_name} as a director on {appointment_date}");
		filingHistoryDescriptionMap.put("appoint-corporate-director-company-with-name", "**Appointment** of {officer_name} as a director");
		filingHistoryDescriptionMap.put("appoint-corporate-director-company", "**Appointment** of a director");
		filingHistoryDescriptionMap.put("appoint-corporate-secretary-company-with-name-date", "**Appointment** of {officer_name} as a secretary on {appointment_date}");
		filingHistoryDescriptionMap.put("appoint-corporate-secretary-company-with-name", "**Appointment** of {officer_name} as a secretary");
		filingHistoryDescriptionMap.put("appoint-corporate-secretary-company", "**Appointment** of a secretary");
		filingHistoryDescriptionMap.put("appoint-person-member-limited-liability-partnership-with-appointment-date", "**Appointment** of {officer_name} as a member on {appointment_date}");
		filingHistoryDescriptionMap.put("appoint-person-member-limited-liability-partnership", "**Appointment** of {officer_name} as a member");
		filingHistoryDescriptionMap.put("appoint-corporate-member-limited-liability-partnership-with-appointment-date", "**Appointment** of {officer_name} as a member on {appointment_date}");
		filingHistoryDescriptionMap.put("appoint-corporate-member-limited-liability-partnership", "**Appointment** of {officer_name} as a member");
		filingHistoryDescriptionMap.put("appoint-manager-company-with-name-date", "**Appointment** of {officer_name} as a manager on {appointment_date}");
		filingHistoryDescriptionMap.put("appoint-manager-company-with-name", "**Appointment** of {officer_name} as a manager");
		filingHistoryDescriptionMap.put("appoint-manager-company", "**Appointment** of a manager");
		filingHistoryDescriptionMap.put("appoint-person-director-overseas-company-with-name-appointment-date", "**Appointment** of {officer_name} as a director on {appointment_date}");
		filingHistoryDescriptionMap.put("appoint-person-director-overseas-company-with-name", "**Appointment** of {officer_name} as a director");
		filingHistoryDescriptionMap.put("appoint-person-director-overseas-company", "**Appointment** of a director");
		filingHistoryDescriptionMap.put("appoint-corporate-director-overseas-company-with-appointment-date", "**Appointment** of {officer_name} as a director on {appointment_date}");
		filingHistoryDescriptionMap.put("appoint-corporate-director-overseas-company", "**Appointment** of {officer_name} as a director");
		filingHistoryDescriptionMap.put("appoint-person-secretary-overseas-company-with-appointment-date", "**Appointment** of {officer_name} as a secretary on {appointment_date}");
		filingHistoryDescriptionMap.put("appoint-person-secretary-overseas-company", "**Appointment** of {officer_name} as a secretary");
		filingHistoryDescriptionMap.put("appoint-corporate-secretary-overseas-company-with-appointment-date", "**Appointment** of {officer_name} as a secretary on {appointment_date}");
		filingHistoryDescriptionMap.put("appoint-corporate-secretary-overseas-company", "**Appointment** of {officer_name} as a secretary");
		filingHistoryDescriptionMap.put("appoint-person-authorised-represent-overseas-company-with-appointment-date", "**Appointment** of {officer_name} as a person authorised to represent UK establishment **{branch_number}** on {change_date}.");
		filingHistoryDescriptionMap.put("appoint-person-authorised-represent-overseas-company", "**Appointment** {change_details}");
		filingHistoryDescriptionMap.put("appoint-judicial-factor-overseas-company-with-appointment-date", "**Appointment** of {officer_name} as a judicial factor on {appointment_date}");
		filingHistoryDescriptionMap.put("appoint-judicial-factor-overseas-company", "**Appointment** of a judicial factor");
		filingHistoryDescriptionMap.put("appoint-person-authorised-accept-overseas-company-with-appointment-date", "**Appointment** of {officer_name} as a person authorised to accept service for UK establishment **{branch_number}** on {change_date}.");
		filingHistoryDescriptionMap.put("appoint-person-authorised-accept-overseas-company", "**Appointment** {change_details}");
		filingHistoryDescriptionMap.put("appoint-corporate-member-societas-europaea-with-name-appointment-date", "**Appointment** of {officer_name} as a corporate member on {appointment_date}");
		filingHistoryDescriptionMap.put("appoint-corporate-member-societas-europaea-with-name", "**Appointment** of {officer_name} as a corporate member");
		filingHistoryDescriptionMap.put("appoint-corporate-member-societas-europaea", "**Appointment** of a corporate member");
		filingHistoryDescriptionMap.put("appoint-person-member-societas-europaea-with-name-appointment-date", "**Appointment** of {officer_name} as a member on {appointment_date}");
		filingHistoryDescriptionMap.put("appoint-person-member-societas-europaea-with-name", "**Appointment** of {officer_name} as a member");
		filingHistoryDescriptionMap.put("appoint-person-member-societas-europaea", "**Appointment** of a member");
		filingHistoryDescriptionMap.put("appoint-manager-european-economic-interest-groupings-with-appointment-date", "**Appointment** of a manager on {appointment_date}");
		filingHistoryDescriptionMap.put("appoint-manager-european-economic-interest-groupings", "**Appointment** of a manager");
		filingHistoryDescriptionMap.put("change-person-director-company-with-change-date", "**Director's details changed** for {officer_name} on {change_date}");
		filingHistoryDescriptionMap.put("change-person-director-company", "**Director's details changed**");
		filingHistoryDescriptionMap.put("change-person-secretary-company-with-change-date", "**Secretary's details changed** for {officer_name} on {change_date}");
		filingHistoryDescriptionMap.put("change-person-secretary-company", "**Secretary's details changed** for {officer_name}");
		filingHistoryDescriptionMap.put("change-corporate-director-company-with-change-date", "**Director's details changed** for {officer_name} on {change_date}");
		filingHistoryDescriptionMap.put("change-corporate-director-company", "**Director's details changed**");
		filingHistoryDescriptionMap.put("change-corporate-secretary-company-with-change-date", "**Secretary's details changed** for {officer_name} on {change_date}");
		filingHistoryDescriptionMap.put("change-corporate-secretary-company", "**Secretary's details changed**");
		filingHistoryDescriptionMap.put("change-person-director-overseas-company-with-change-date", "**Director's details changed** for {officer_name} on {change_date}");
		filingHistoryDescriptionMap.put("change-person-director-overseas-company", "**Director's details changed**");
		filingHistoryDescriptionMap.put("change-corporate-director-overseas-company-with-change-date", "**Director's details changed** for {officer_name} on {change_date}");
		filingHistoryDescriptionMap.put("change-corporate-director-overseas-company", "**Director's details changed**");
		filingHistoryDescriptionMap.put("change-person-secretary-overseas-company-with-change-date", "**Secretary's details changed** for {officer_name} on {change_date}");
		filingHistoryDescriptionMap.put("change-person-secretary-overseas-company", "**Secretary's details changed**");
		filingHistoryDescriptionMap.put("change-corporate-secretary-overseas-company-with-change-date", "**Secretary's details changed** for {officer_name} on {change_date}");
		filingHistoryDescriptionMap.put("change-corporate-secretary-overseas-company", "**Secretary's details changed**");
		filingHistoryDescriptionMap.put("change-person-authorised-overseas-company-with-change-date", "**Change of details** for {officer_name} as a person authorised to represent UK establishment **{branch_number}** on {change_date}");
		filingHistoryDescriptionMap.put("change-person-authorised-overseas-company", "**Change of details** {change_details}");
		filingHistoryDescriptionMap.put("change-service-address-judicial-factor-overseas-company", "**Service address changed**");
		filingHistoryDescriptionMap.put("change-person-authorised-to-represent-overseas-company-with-change-date", "**Change of details** for {officer_name} as a person authorised to accept service for UK establishment **{branch_number}** on {change_date}");
		filingHistoryDescriptionMap.put("change-person-authorised-to-represent-overseas-company", "**Change of details** {change_details}");
		filingHistoryDescriptionMap.put("change-service-address-manager", "**Service address changed** for {officer_name}");
		filingHistoryDescriptionMap.put("change-person-member-limited-liability-partnership-with-name-change-date", "**Member's details changed** for {officer_name} on {change_date}");
		filingHistoryDescriptionMap.put("change-person-member-limited-liability-partnership", "**Member's details changed**");
		filingHistoryDescriptionMap.put("change-corporate-member-limited-liability-partnership-with-name-change-date", "**Member's details changed** for {officer_name} on {change_date}");
		filingHistoryDescriptionMap.put("change-corporate-member-limited-liability-partnership", "**Member's details changed** for {officer_name}");
		filingHistoryDescriptionMap.put("change-manager-european-economic-interest-groups-with-change-date", "**Manager details changed** on {change_date}");
		filingHistoryDescriptionMap.put("change-manager-european-economic-interest-groups", "**Manager details changed**");
		filingHistoryDescriptionMap.put("change-person-member-societas-europaea-with-name-date", "**Member's details changed** for {officer_name} on {change_date}");
		filingHistoryDescriptionMap.put("change-person-member-societas-europaea-with-name", "**Member's details changed** for {officer_name}");
		filingHistoryDescriptionMap.put("change-person-member-societas-europaea", "**Member's details changed**");
		filingHistoryDescriptionMap.put("change-corporate-member-societas-europaea-with-name-date", "**Member's details changed** for {officer_name} on {change_date}");
		filingHistoryDescriptionMap.put("change-corporate-member-societas-europaea-with-name", "**Member's details changed** for {officer_name}");
		filingHistoryDescriptionMap.put("change-corporate-member-societas-europaea", "**Member's details changed**");
		filingHistoryDescriptionMap.put("change-proprietors-newspaper", "**Register a change of registered proprietors** outside of the annual return");
		filingHistoryDescriptionMap.put("termination-person-director-overseas-company-with-name-termination-date", "**Termination of appointment** of {officer_name} as a director on {termination_date}");
		filingHistoryDescriptionMap.put("termination-person-director-overseas-company-with-name", "**Termination of appointment** of {officer_name} as a director");
		filingHistoryDescriptionMap.put("termination-person-director-overseas-company", "**Termination of appointment** of a director");
		filingHistoryDescriptionMap.put("termination-person-secretary-overseas-company-with-name-termination-date", "**Termination of appointment** of {officer_name} as secretary on {termination_date}");
		filingHistoryDescriptionMap.put("termination-person-secretary-overseas-company-with-name", "**Termination of appointment** of {officer_name} as secretary");
		filingHistoryDescriptionMap.put("termination-person-secretary-overseas-company", "**Termination of appointment** of a secretary");
		filingHistoryDescriptionMap.put("termination-person-authorised-overseas-company", "**Termination of appointment** for a UK establishment - {change_details}");
		filingHistoryDescriptionMap.put("termination-person-judicial-factor-overseas-company-with-name-termination-date", "**Termination of appointment** of {officer_name} as judicial factor on {termination_date}");
		filingHistoryDescriptionMap.put("termination-person-judicial-factor-overseas-company-with-name", "**Termination of appointment** of {officer_name} as judicial factor");
		filingHistoryDescriptionMap.put("termination-person-judicial-factor-overseas-company", "**Termination of appointment** of a judicial factor");
		filingHistoryDescriptionMap.put("termination-director-company-with-name-termination-date", "**Termination of appointment** of {officer_name} as a director on {termination_date}");
		filingHistoryDescriptionMap.put("termination-director-company-with-name", "**Termination of appointment** of {officer_name} as a director");
		filingHistoryDescriptionMap.put("termination-director-company", "**Termination of appointment** of a director");
		filingHistoryDescriptionMap.put("termination-member-limited-liability-partnership-with-name-termination-date", "**Termination of appointment** of {officer_name} as a member on {termination_date}");
		filingHistoryDescriptionMap.put("termination-member-limited-liability-partnership-with-name", "**Termination of appointment** of {officer_name} as a member");
		filingHistoryDescriptionMap.put("termination-member-limited-liability-partnership", "**Termination of appointment** of a member");
		filingHistoryDescriptionMap.put("termination-secretary-company-with-name-termination-date", "**Termination of appointment** of {officer_name} as a secretary on {termination_date}");
		filingHistoryDescriptionMap.put("termination-secretary-company-with-name", "**Termination of appointment** of {officer_name} as a secretary");
		filingHistoryDescriptionMap.put("termination-secretary-company", "**Termination of appointment** of a secretary");
		filingHistoryDescriptionMap.put("termination-manager-company-with-termination-date", "**Termination of appointment** of {officer_name} as a manager on {termination_date}");
		filingHistoryDescriptionMap.put("termination-manager-company", "**Termination of appointment** of {officer_name} as a manager");
		filingHistoryDescriptionMap.put("termination-member-societas-europaea-with-name-termination-date", "**Termination of appointment** of {officer_name} on {termination_date}");
		filingHistoryDescriptionMap.put("termination-member-societas-europaea-with-name", "**Termination of appointment** of {officer_name}");
		filingHistoryDescriptionMap.put("termination-member-societas-europaea", "**Termination of appointment** of a member");
		filingHistoryDescriptionMap.put("notice-restriction-on-company-articles", "**Notice of Restriction on the Company's Articles**");
		filingHistoryDescriptionMap.put("notice-removal-restriction-on-company-articles", "**Notice of removal of restriction on the company's articles**");
		filingHistoryDescriptionMap.put("statement-compliance-articles-restricted", "**Statement of compliance** where amendment of articles restricted");
		filingHistoryDescriptionMap.put("statement-of-companys-objects", "**Statement of company's objects**");
		filingHistoryDescriptionMap.put("change-constitution-enactment", "**Change of constitution by enactment**");
		filingHistoryDescriptionMap.put("change-constitution-by-court-order", "**Change of constitution** by order of court or other authority");
		filingHistoryDescriptionMap.put("change-constitutional-documents-overseas-company-with-date", " **Alteration of constitutional documents** on {change_date}");
		filingHistoryDescriptionMap.put("change-constitutional-documents-overseas-company", "**Alteration of constitutional documents** {change_date}");
		filingHistoryDescriptionMap.put("change-uk-establishment-relating-to-constitutional-documents", "**Change of UK establishment** relating to constitutional documents");
		filingHistoryDescriptionMap.put("change-of-name-direction", "**Change of company name** direction on {change_date}");
		filingHistoryDescriptionMap.put("change-of-name-exemption", "**Name change exemption** from using 'limited' or 'cyfyngedig'");
		filingHistoryDescriptionMap.put("change-of-name-conditional-resolution-satisfaction", "**Change of name** confirming satisfaction of conditional resolution");
		filingHistoryDescriptionMap.put("change-of-name-by-provision-in-articles", "**Change of name** by provision in articles");
		filingHistoryDescriptionMap.put("change-of-name-by-directors-resolution", "**Change of name** by directors resolution");
		filingHistoryDescriptionMap.put("change-of-name-by-resolution", "**Change of name** by resolution");
		filingHistoryDescriptionMap.put("change-of-name-by-conditional-resolution", "**Change of name** by conditional resolution");
		filingHistoryDescriptionMap.put("change-of-name-request-comments", "**Change of name** with request to seek comments from relevant body");
		filingHistoryDescriptionMap.put("change-of-name-notice", "**Change of name** notice");
		filingHistoryDescriptionMap.put("change-of-name-overseas-by-resolution-with-date", "**Change of registered name** of an overseas company on {change_date} from {change_name}");
		filingHistoryDescriptionMap.put("change-of-name-overseas-by-resolution", "**Change of registered name** {change_name}");
		filingHistoryDescriptionMap.put("change-of-name-notice-limited-liability-partnership", "**Change of name** notice");
		filingHistoryDescriptionMap.put("change-of-status-limited-liability-partnership", "**Change of status** notice");
		filingHistoryDescriptionMap.put("change-of-name-community-interest-company", "**Change of name**");
		filingHistoryDescriptionMap.put("annotation", "");
		filingHistoryDescriptionMap.put("dissolution-application-strike-off-company", "**Application to strike the company off the register**");
		filingHistoryDescriptionMap.put("dissolution-withdrawal-application-strike-off-company", "**Withdraw the company strike off application**");
		filingHistoryDescriptionMap.put("dissolution-application-strike-off-limited-liability-partnership", "**Application to strike the limited liability partnership off the register**");
		filingHistoryDescriptionMap.put("dissolution-withdrawal-application-strike-off-limited-liability-partnership", "**Withdraw the strike off application**");
		filingHistoryDescriptionMap.put("dissolution-closure-of-uk-establishment", "**Closure** of UK establishment(s) **{branch_number}** on {close_date}");
		filingHistoryDescriptionMap.put("dissolution-closure-of-uk-establishment-and-overseas-company", "**Closure** of UK establishment(s) **{branch_number}** and overseas company **{company_number}** on {close_date}");
		filingHistoryDescriptionMap.put("dissolution-closure-overseas-company", "**Closure** of UK establishment(s) {change_details}");
		filingHistoryDescriptionMap.put("dissolution-termination-overseas-company", "**Termination of overseas company** insolvency proceedings");
		filingHistoryDescriptionMap.put("dissolution-voluntary-strike-off-discontinued", "**Voluntary strike-off action has been discontinued**");
		filingHistoryDescriptionMap.put("dissolution-voluntary-strike-off-suspended", "**Voluntary strike-off action has been suspended**");
		filingHistoryDescriptionMap.put("dissolution-request-where-liquidator-ceased-to-act", "**Request of dissolution of a company** where a liquidator has ceased to act");
		filingHistoryDescriptionMap.put("registration-of-uk-establishment", "**Registration** of a UK establishment");
		filingHistoryDescriptionMap.put("register-overseas-company-with-date", "**Registration** of a UK establishment of an overseas company on {incorporation_date}");
		filingHistoryDescriptionMap.put("register-overseas-company", "**Registration** of a UK establishment of an overseas company");
		filingHistoryDescriptionMap.put("appointment-at-registration-of-person-authorised-to-accept-service", "**Appointment at registration** for **{branch_number}** - person authorised to accept service, {representative_details}");
		filingHistoryDescriptionMap.put("appointment-at-registration-of-person-authorised-to-represent", "**Appointment at registration** for **{branch_number}** - person authorised to represent, {representative_details}");
		filingHistoryDescriptionMap.put("appointment-overseas-company", "**Appointment at registration** {representative_details}");
		filingHistoryDescriptionMap.put("incorporation-limited-liability-partnership-with-date", "**Incorporation** of a limited liability partnership on {incorporation_date}");
		filingHistoryDescriptionMap.put("incorporation-limited-liability-partnership", "**Incorporation** of a limited liability partnership");
		filingHistoryDescriptionMap.put("memorandum-articles", "**Memorandum and Articles of Association**");
		filingHistoryDescriptionMap.put("re-registration-memorandum-articles", "**Re-registration** of Memorandum and Articles");
		filingHistoryDescriptionMap.put("model-articles-adopted", "**Model articles adopted**");
		filingHistoryDescriptionMap.put("model-articles-adopted-amended-provisions", "**Model articles adopted (Amended Provisions)**");
		filingHistoryDescriptionMap.put("incorporation-company", "**Incorporation**");
		filingHistoryDescriptionMap.put("incorporation-company-with-type-date", "**Incorporation** of a {company_type} on {incorporation_date}");
		filingHistoryDescriptionMap.put("incorporation-community-interest-company-with-date", "**Incorporation** of a Community Interest Company on {incorporation_date}");
		filingHistoryDescriptionMap.put("incorporation-community-interest-company", "**Incorporation** of a Community Interest Company");
		filingHistoryDescriptionMap.put("registration-company-as-social-landlord", "**Registration** of a company as a social landlord");
		filingHistoryDescriptionMap.put("formation-european-economic-interest-groups-official-address-inside-uk-with-date", "**Formation** of European Economic Interest Group on {incorporation_date} whose official address is in the UK");
		filingHistoryDescriptionMap.put("formation-european-economic-interest-groups-official-address-inside-uk", "**Formation** of European Economic Interest Group whose official address is in the UK");
		filingHistoryDescriptionMap.put("formation-european-economic-interest-groups-official-address-outside-uk", "**Formation** of European Economic Interest Group on {incorporation_date} whose official address is outside of the UK");
		filingHistoryDescriptionMap.put("formation-by-merger-of-societas-europaea", "**Formation** by merger of Societas Europaea to be registered in the UK");
		filingHistoryDescriptionMap.put("formation-of-holding-societas-europaea", "**Formation** of holding Societas Europaea");
		filingHistoryDescriptionMap.put("formation-of-subsidiary-societas-europaea-article2", "**Formation** of subsidiary Societas Europaea");
		filingHistoryDescriptionMap.put("formation-of-subsidiary-societas-europaea-article3", "**Formation** of subsidiary Societas Europaea");
		filingHistoryDescriptionMap.put("formation-terms-holding-societas-europaea", "**Draft terms of formation**");
		filingHistoryDescriptionMap.put("formation-terms-conversion-public-limited-company-to-societas-europaea", "**Draft terms of conversion** of Public Limited Company to Societas Europaea");
		filingHistoryDescriptionMap.put("formation-terms-conversion-societas-europaea-to-public-limited-company", "**Draft terms of conversion** of Societas Europaea to Public Limited Company");
		filingHistoryDescriptionMap.put("transformation-public-limited-company-to-societas-europaea", "**Closure of Public Limited Company and transformed to Societas Europaea**");
		filingHistoryDescriptionMap.put("proposed-transfer-societas-europaea-to-uk", "**Proposed transfer of Societas Europaea to United Kingdom**");
		filingHistoryDescriptionMap.put("transfer-societas-europaea-to-uk", "**Transfer of Societas Europaea to United Kingdom**");
		filingHistoryDescriptionMap.put("transfer-societas-europaea-from-uk", "**Transfer of Societas Europaea from United Kingdom**");
		filingHistoryDescriptionMap.put("statement-solvency-by-members-societas-euopaea-proposing-to-transfer-from-uk", "**Statement of solvency** by members of Societas Europaea which is proposing to transfer from the United Kingdom");
		filingHistoryDescriptionMap.put("conversion-societas-europaea-to-public-limited-company", "**Conversion of Societas Europaea to Public Limited Company**");
		filingHistoryDescriptionMap.put("notice-satisfaction-of-conditions-formation-of-societas-europaea", "**Notice of satisfaction** of conditions for the formation of holding Societas Europaea by a UK registered company");
		filingHistoryDescriptionMap.put("notice-from-overseas-registry-transfer-from-uk", "**Transfer of an overseas company from UK**");
		filingHistoryDescriptionMap.put("application-to-commence-business", "**Application to commence business**");
		filingHistoryDescriptionMap.put("registration-of-european-economic-interest-group-address-in-uk", "**Registration** of a European Economic Interest Group whose official address is in the United Kingdom");
		filingHistoryDescriptionMap.put("reregistration-private-to-public-company", "**Re-registration from a private company to a public company**");
		filingHistoryDescriptionMap.put("reregistration-private-to-public-company-appoint-secretary", "**Re-registration from a private company to a public company** including appointment of secretary(s)");
		filingHistoryDescriptionMap.put("reregistration-public-to-private-company", "**Re-registration from a public company to a private limited company**");
		filingHistoryDescriptionMap.put("notice-to-cancel-reregistration-by-company", "**Cancellation of re-registration** by the company");
		filingHistoryDescriptionMap.put("notice-to-cancel-reregistration-by-applicants", "**Cancellation of reregistration** by the applicants");
		filingHistoryDescriptionMap.put("reregistration-private-limited-to-private-unlimited-company", "**Re-registration** from a private limited company to a private unlimited company");
		filingHistoryDescriptionMap.put("reregistration-private-unlimited-to-private-limited-company", "**Re-registration** from a private unlimited company to a private limited company");
		filingHistoryDescriptionMap.put("reregistration-public-to-private-unlimited-company", "**Re-registration** from a public company to a private unlimited company");
		filingHistoryDescriptionMap.put("reregistration-public-to-private-following-court-order", "**Re-registration** from a public company to a private company following a court order");
		filingHistoryDescriptionMap.put("reregistration-public-to-private-following-cancellation-of-shares", "**Re-registration** from a public company to a private company following share cancellation");
		filingHistoryDescriptionMap.put("reregistration-public-to-private-following-capital-reduction", "**Re-registration** from a public company to a private company following capital reduction");
		filingHistoryDescriptionMap.put("reregistration-assent", "**Re-registration assent**");
		filingHistoryDescriptionMap.put("reregistration", "**Re-registration**");
		filingHistoryDescriptionMap.put("application-trading-certificate", "**Trading certificate for a public company**");
		filingHistoryDescriptionMap.put("re-registration-court-order-to-reduce-share-capital", "**Re-registration** court order to reduce share capital");
		filingHistoryDescriptionMap.put("document-replacement", "Replacement of a document not meeting requirements for proper delivery");
		filingHistoryDescriptionMap.put("application-document-rectification", "**Application for rectification** of information held by Companies House");
		filingHistoryDescriptionMap.put("notice-objection-to-request-to-rectify-register", "**Notice of an objection** to a request for the registrar of Companies House to rectify the register");
		filingHistoryDescriptionMap.put("second-filing-of-form-with-form-type-made-up-date", "**Second filing** of {form_type} previously delivered to Companies House made up to {made_up_date}");
		filingHistoryDescriptionMap.put("second-filing-of-form-with-form-type", "**Second filing** of {form_type} previously delivered to Companies House");
		filingHistoryDescriptionMap.put("second-filing-of-form", "**Second filing** of form previously delivered to Companies House");
		filingHistoryDescriptionMap.put("notice-carry-on-business-as-investment-company", "**Notice of intention** to carry on business as an investment company");
		filingHistoryDescriptionMap.put("notice-no-longer-an-investment-company", "**Notice** that a company no longer wishes to be an investment company");
		filingHistoryDescriptionMap.put("amendment-of-statutes-societas-europaea", "**Amendment of Statutes**");
		filingHistoryDescriptionMap.put("removal-company-as-social-landlord-with-removal-date", "**Removal of a company** as a social landlord on {removal_date}");
		filingHistoryDescriptionMap.put("removal-company-as-social-landlord", "**Removal of a company** as a social landlord");
		filingHistoryDescriptionMap.put("notice-appeal-to-remove-company-from-social-landlord-register", "**Notice of appeal** against a decision to remove a company from the Register of Social Landlords");
		filingHistoryDescriptionMap.put("statement-of-affairs", "**Statement of affairs**");
		filingHistoryDescriptionMap.put("change-registered-office-address-limited-liability-partnership-with-date-old-address-new-address", "**Registered office address changed** from {old_address} to {new_address} on {change_date}");
		filingHistoryDescriptionMap.put("change-registered-office-address-limited-liability-partnership-with-date-old-address", "**Registered office address changed** from {old_address} on {change_date}");
		filingHistoryDescriptionMap.put("change-registered-office-address-limited-liability-partnership", "**Registered office address changed**");
		filingHistoryDescriptionMap.put("change-registered-office-address-company-with-date-old-address-new-address", "**Registered office address changed** from {old_address} to {new_address} on {change_date}");
		filingHistoryDescriptionMap.put("change-registered-office-address-company-with-date-old-address", "**Registered office address changed** from {old_address} on {change_date}");
		filingHistoryDescriptionMap.put("change-registered-office-address-company", "**Registered office address changed**");
		filingHistoryDescriptionMap.put("change-sail-address-company-with-old-address-new-address", "**Register inspection address** has been changed from {old_address} to {new_address}");
		filingHistoryDescriptionMap.put("change-sail-address-company-with-new-address", "**Register inspection address** has been changed to {new_address}");
		filingHistoryDescriptionMap.put("change-sail-address-company-with-old-address", "**Register inspection address** has been changed from {old_address}");
		filingHistoryDescriptionMap.put("change-sail-address-company", "**Register inspection address** has been changed");
		filingHistoryDescriptionMap.put("move-registers-to-sail-company-with-new-address", "**Register(s) moved** to registered inspection location {new_address}");
		filingHistoryDescriptionMap.put("move-registers-to-sail-company", "**Register(s) moved** to registered inspection location");
		filingHistoryDescriptionMap.put("move-registers-to-registered-office-company-with-new-address", "**Register(s) moved** to registered office address {new_address}");
		filingHistoryDescriptionMap.put("move-registers-to-registered-office-company", "**Register(s) moved** to registered office address");
		filingHistoryDescriptionMap.put("change-sail-address-limited-liability-partnership-with-old-address-new-address", "**Location of register of charges** has been changed from {old_address} to {new_address}");
		filingHistoryDescriptionMap.put("change-sail-address-limited-liability-partnership-with-new-address", "**Location of register of charges** has been changed to {new_address}");
		filingHistoryDescriptionMap.put("change-sail-address-limited-liability-partnership-with-old-address", "**Location of register of charges** has been changed from {old_address}");
		filingHistoryDescriptionMap.put("change-sail-address-limited-liability-partnership", "**Location of register of charges** has been changed");
		filingHistoryDescriptionMap.put("move-registers-to-sail-limited-liability-partnership-with-new-address", "**Register(s) moved** to registered inspection location {new_address}");
		filingHistoryDescriptionMap.put("move-registers-to-sail-limited-liability-partnership", "**Register(s) moved** to registered inspection location");
		filingHistoryDescriptionMap.put("move-registers-to-registered-office-limited-liability-partnership-with-new-address", "**Register(s) moved** to registered office address {new_address}");
		filingHistoryDescriptionMap.put("move-registers-to-registered-office-limited-liability-partnership", "**Register(s) moved** to registered office address");
		filingHistoryDescriptionMap.put("change-registered-office-addres-overseas-company", "**Place of business address changed**");
		filingHistoryDescriptionMap.put("change-registered-office-situation-limited-liability-partnership", "**Change the registered office situation**");
		filingHistoryDescriptionMap.put("change-registered-office-situation-company-with-old-jurisdiction-new-jurisdiction-date", "**Change the registered office situation** from {old_jurisdiction} to {new_jurisdiction} on {change_date}");
		filingHistoryDescriptionMap.put("change-registered-office-situation-company-with-old-jurisdiction-new-jurisdiction", "**Change the registered office situation** from {old_jurisdiction} to {new_jurisdiction}");
		filingHistoryDescriptionMap.put("change-registered-office-situation-company-with-new-jurisdiction", "**Change the registered office situation** to {new_jurisdiction}");
		filingHistoryDescriptionMap.put("change-sail-address-overseas-company", "**Location of register of charges has been changed**");
		filingHistoryDescriptionMap.put("statement-of-capital", "Statement of capital on {date}");
		filingHistoryDescriptionMap.put("capital-allotment-shares", "**Statement of capital following an allotment of shares** on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares-consolidation", "**Consolidation of shares** on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares-consolidation-statement-of-capital", "**Consolidation of shares** Statement of capital on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares-subdivision", "**Sub-division of shares** on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares-subdivision-statement-of-capital", "**Sub-division of shares** Statement of capital on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares-redemption-statement-of-capital", "**Statement of capital** on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares-redemption", "**Re-demption of shares** on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares-reconversion", "**Re-conversion of shares** on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares-reconversion-statement-of-capital", "**Re-conversion of shares** Statement of capital on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares-consolidation-subdivision-reconversion", "**Consolidation, sub-division, re-conversion of shares** on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares-consolidation-subdivision-reconversion-statement-of-capital", "**Consolidation, sub-division, re-conversion of shares.** Statement of capital on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares-consolidation-subdivision", "**Consolidation and sub-division of shares** on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares-consolidation-subdivision-statement-of-capital", "**Consolidation and sub-division of shares** Statement of capital on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares-consolidation-reconversion", "**Consolidation and re-conversion of shares** on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares-consolidation-reconversion-statement-of-capital", "**Consolidation and re-conversion of shares** Statement of capital on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares-subdivision-reconversion", "**Sub-division, re-conversion of shares** on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares-subdivision-reconversion-statement-of-capital", "**Sub-division, re-conversion of shares** Statement of capital on {date}");
		filingHistoryDescriptionMap.put("capital-alter-shares", "**Alter Share Capital**");
		filingHistoryDescriptionMap.put("capital-return-purchase-own-shares-treasury-capital-date", "**Purchase of own shares.** Shares purchased into treasury:");
		filingHistoryDescriptionMap.put("capital-return-purchase-own-shares-share-capital-date", "**Purchase of own shares.** Shares purchased into treasury:");
		filingHistoryDescriptionMap.put("capital-return-purchase-own-shares", "**Purchase of own shares.**");
		filingHistoryDescriptionMap.put("capital-return-purchase-own-shares-capital-date", "**Purchase of own shares.** Capital on {date}");
		filingHistoryDescriptionMap.put("capital-sale-or-transfer-treasury-shares-with-date-currency-capital-figure", "**Sale or transfer of treasury shares.** Treasury capital:");
		filingHistoryDescriptionMap.put("capital-sale-or-transfer-treasury-shares-with-date-currency", "**Sale or transfer of treasury shares.** Treasury capital:");
		filingHistoryDescriptionMap.put("capital-sale-or-transfer-treasury-shares-with-date", "**Sale or transfer of treasury shares.** Treasury capital on {date}");
		filingHistoryDescriptionMap.put("capital-sale-or-transfer-treasury-shares", "**Sale or transfer of treasury shares.** Treasury capital");
		filingHistoryDescriptionMap.put("capital-cancellation-treasury-shares-with-date-currency-capital-figure", "**Statement of capital** on {date}");
		filingHistoryDescriptionMap.put("capital-cancellation-treasury-shares-with-date-treasury-capital-figure", "**Cancellation of treasury shares.** Treasury capital:");
		filingHistoryDescriptionMap.put("capital-cancellation-treasury-shares", "**Cancellation of treasury shares.** Statement of capital");
		filingHistoryDescriptionMap.put("capital-cancellation-shares", "**Cancellation of shares.** Statement of capital on {date}");
		filingHistoryDescriptionMap.put("capital-cancellation-shares-by-plc", "**Cancellation of shares by a PLC.** Statement of capital on {date}");
		filingHistoryDescriptionMap.put("capital-name-of-class-of-shares-with-date", "**Change of share class name or designation** on {date}");
		filingHistoryDescriptionMap.put("capital-name-of-class-of-shares", "**Change of share class name or designation**");
		filingHistoryDescriptionMap.put("capital-allotment-new-class-of-shares", "**Allotment of a new class of shares** by an unlimited company");
		filingHistoryDescriptionMap.put("capital-variation-of-rights-attached-to-shares", "**Particulars of variation of rights** attached to shares");
		filingHistoryDescriptionMap.put("capital-new-class-members", "**New class of members**");
		filingHistoryDescriptionMap.put("capital-variation-of-class-rights", "**Particulars of variation of class rights update**");
		filingHistoryDescriptionMap.put("capital-update-to-class-of-members", "**Update to class of members**");
		filingHistoryDescriptionMap.put("capital-redomination-of-shares", "**Redenomination of shares.** Statement of capital {date}");
		filingHistoryDescriptionMap.put("capital-reduction-of-capital-redomination", "**Reduction of capital following redenomination.** Statement of capital on {date}");
		filingHistoryDescriptionMap.put("capital-application-to-court-cancellation-of-special-resolution-approving-redemption-purchase-of-shares-out-of-capital", "**Application to court** for cancellation of the special resolution approving a redemption or purchase of shares out of capital");
		filingHistoryDescriptionMap.put("capital-application-by-company-to-court-cancellation-of-special-resolution-approving-redemption-purchase-of-shares-out-of-capital", "**Application by the company to court** for cancellation of the special resolution approving a redemption or purchase of shares out of capital");
		filingHistoryDescriptionMap.put("capital-statement-directors-reduction-of-capital-following-redomination", "**Statement of directors** in accordance with reduction of capital following redenomination");
		filingHistoryDescriptionMap.put("capital-statement-capital-company-with-date-currency-figure", "**Statement of capital** on {date}");
		filingHistoryDescriptionMap.put("capital-statement-capital-company", "**Statement of capital**");
		filingHistoryDescriptionMap.put("capital-directors-statement-auditors-report", "**Directors statement and auditors report.** Out of capital");
		filingHistoryDescriptionMap.put("change-company-details-by-uk-establishment-overseas-company", "**Details changed** for a UK establishment - {change_details}");
		filingHistoryDescriptionMap.put("change-company-details-by-uk-establishment-overseas-company-with-change-details", "**Details changed** for a UK establishment - **{branch_number}** {change_type} {change_details},{change_date}");
		filingHistoryDescriptionMap.put("change-company-details-overseas-company-with-change-details", "**Details changed** for an overseas company - {change_address}");
		filingHistoryDescriptionMap.put("change-company-details-overseas-company", "**Details changed** for an overseas company -  {change_address}");
		filingHistoryDescriptionMap.put("scheme-of-arrangement", "**Scheme of arrangement**");
		filingHistoryDescriptionMap.put("notice-of-closure-branch-overseas-company", "**Notice of closure** of a place of business");
		filingHistoryDescriptionMap.put("dissolved-company", "**Dissolution**");
		filingHistoryDescriptionMap.put("gazette-return-of-final-meeting", "**Gazette** return of final meeting");
		filingHistoryDescriptionMap.put("gazette-return-of-final-meeting-processed", "**Gazette** return of final meeting");
		filingHistoryDescriptionMap.put("liquidation-ex", "**No longer in liquidation**");
		filingHistoryDescriptionMap.put("restoration-order-of-court", "**Restoration** by order of the court");
		filingHistoryDescriptionMap.put("address-correction", "**Address** correction");
		filingHistoryDescriptionMap.put("dissolved-compulsory-strike-off-suspended", "**Compulsory strike-off action has been suspended**");
		filingHistoryDescriptionMap.put("no-description-available", "No description available");
		filingHistoryDescriptionMap.put("particulars-of-a-mortgage-charge", "Particulars of a mortgage charge");
		filingHistoryDescriptionMap.put("default-companies-house-registered-office-address-applied", "**Registered office address changed** to {default_address} on {change_date}");
		filingHistoryDescriptionMap.put("order-of-court-registered-office-address-change", "**Registered office address changed** on {change_date} by order of court from {old_address} to {new_address}");
		filingHistoryDescriptionMap.put("order-of-court-registered-office-address-change-def", "**Registered office address changed** on {change_date} by order of court to {new_address}");
		filingHistoryDescriptionMap.put("court-upheld-registrars-decision-on-registered-office-address", "**Court upheld the registrar's decision** to use Companies House default address as the registered office address");
		filingHistoryDescriptionMap.put("notification-of-a-person-with-significant-control", "**Notification** of {psc_name} as a person with significant control on {notification_date}");
		filingHistoryDescriptionMap.put("notification-of-a-super-secure-person-with-significant-control", "**Notification** of a protected person with significant control");
		filingHistoryDescriptionMap.put("change-to-a-person-with-significant-control", "**Change** of details for {psc_name} as a person with significant control on {change_date}");
		filingHistoryDescriptionMap.put("cessation-of-a-person-with-significant-control", "**Cessation** of {psc_name} as a person with significant control on {cessation_date}");
		filingHistoryDescriptionMap.put("cessation-of-a-super-secure-person-with-significant-control", "**Cessation** of a protected person with significant control");
		filingHistoryDescriptionMap.put("notification-of-a-person-with-significant-control-statement", "**Notification** of a person with significant control statement");
		filingHistoryDescriptionMap.put("withdrawal-of-a-person-with-significant-control-statement", "**Withdrawal** of a person with significant control statement on {withdrawal_date}");
		filingHistoryDescriptionMap.put("notification-of-a-person-with-significant-control-limited-liability-partnership", "**Notification** of {psc_name} as a person with significant control on {notification_date}");
		filingHistoryDescriptionMap.put("notification-of-a-super-secure-person-with-significant-control-limited-liability-partnership", "**Notification** of a protected person with significant control");
		filingHistoryDescriptionMap.put("change-to-a-person-with-significant-control-limited-liability-partnership", "**Change** of details for {psc_name} as a person with significant control on {change_date}");
		filingHistoryDescriptionMap.put("cessation-of-a-person-with-significant-control-limited-liability-partnership", "**Cessation** of {psc_name} as a person with significant control on {cessation_date}");
		filingHistoryDescriptionMap.put("cessation-of-a-super-secure-person-with-significant-control-limited-liability-partnership", "**Cessation** of a protected person with significant control");
		filingHistoryDescriptionMap.put("notification-of-a-person-with-significant-control-statement-limited-liability-partnership", "**Notification** of a person with significant control statement");
		filingHistoryDescriptionMap.put("withdrawal-of-a-person-with-significant-control-statement-limited-liability-partnership", "**Withdrawal** of a person with significant control statement on {withdrawal_date}");
		filingHistoryDescriptionMap.put("elect-to-keep-the-directors-register-information-on-the-public-register", "**Elect** to keep the directors' register information on the public register");
		filingHistoryDescriptionMap.put("elect-to-keep-the-directors-residential-address-register-information-on-the-public-register", "**Elect** to keep the directors' residential address register information on the public register");
		filingHistoryDescriptionMap.put("elect-to-keep-the-secretaries-register-information-on-the-public-register", "**Elect** to keep the secretaries register information on the public register");
		filingHistoryDescriptionMap.put("elect-to-keep-the-persons-with-significant-control-register-information-on-the-public-register", "**Elect** to keep the persons' with significant control register information on the public register");
		filingHistoryDescriptionMap.put("elect-to-keep-the-members-register-information-on-the-public-register", "**Elect** to keep the members' register information on the public register");
		filingHistoryDescriptionMap.put("update-to-the-members-register-information-on-the-public-register", "**Update** to the members' register information on the public register");
		filingHistoryDescriptionMap.put("withdrawal-of-the-directors-register-information-from-the-public-register", "**Withdrawal** of the directors' register information from the public register");
		filingHistoryDescriptionMap.put("withdrawal-of-the-directors-residential-address-register-information-from-the-public-register", "**Withdrawal** of the directors' residential address register information from the public register");
		filingHistoryDescriptionMap.put("withdrawal-of-the-secretaries-register-information-from-the-public-register", "**Withdrawal** of the secretaries register information from the public register");
		filingHistoryDescriptionMap.put("withdrawal-of-the-persons-with-significant-control-register-information-from-the-public-register", "**Withdrawal** of the persons' with significant control register information from the public register");
		filingHistoryDescriptionMap.put("withdrawal-of-the-members-register-information-from-the-public-register", "**Withdrawal** of the members' register information from the public register");
		filingHistoryDescriptionMap.put("elect-to-keep-the-limited-liability-partnership-members-register-information-on-the-public-register", "**Elect** to keep the members' register information on the public register");
		filingHistoryDescriptionMap.put("elect-to-keep-the-limited-liability-partnership-members-residential-address-register-information-on-the-public-register", "**Elect** to keep the members' residential address register information on the public register");
		filingHistoryDescriptionMap.put("elect-to-keep-the-limited-liability-partnership-persons-with-significant-control-register-information-on-the-public-register", "**Elect** to keep the persons' with significant control register information on the public register");
		filingHistoryDescriptionMap.put("withdrawal-of-the-limited-liability-partnership-members-register-information-from-the-public-register", "**Withdrawal** of the members' register information from the public register");
		filingHistoryDescriptionMap.put("withdrawal-of-the-limited-liability-partnership-members-residential-address-register-information-from-the-public-register", "**Withdrawal** of the members' residential address register information from the public register");
		filingHistoryDescriptionMap.put("withdrawal-of-the-limited-liability-partnership-persons-with-significant-control-register-information-from-the-public-register", "**Withdrawal** of the persons' with significant control register information from the public register");
		filingHistoryDescriptionMap.put("second-filing-of-director-appointment-with-name", "**Second filing** for the appointment of {officer_name} as a director");
		filingHistoryDescriptionMap.put("second-filing-of-secretary-appointment-with-name", "**Second filing** for the appointment of {officer_name} as a secretary");
		filingHistoryDescriptionMap.put("second-filing-of-change-of-director-details-with-name", "**Second filing** to change the details of {officer_name} as a director");
		filingHistoryDescriptionMap.put("second-filing-of-change-of-secretary-details-with-name", "**Second filing** to change the details of {officer_name} as a secretary");
		filingHistoryDescriptionMap.put("second-filing-of-director-termination-with-name", "**Second filing** for the termination of {officer_name} as a director");
		filingHistoryDescriptionMap.put("second-filing-of-secretary-termination-with-name", "**Second filing** for the termination of {officer_name} as a secretary");
		filingHistoryDescriptionMap.put("second-filing-of-annual-return-with-made-up-date", "**Second filing** of the annual return made up to {made_up_date}");
		filingHistoryDescriptionMap.put("second-filing-of-member-appointment-with-name", "**Second filing** for the appointment of {officer_name} as a member");
		filingHistoryDescriptionMap.put("second-filing-of-change-of-member-details-with-name", "**Second filing** to change the details of {officer_name} as a member");
		filingHistoryDescriptionMap.put("second-filing-of-member-termination-with-name", "**Second filing** for the termination of {officer_name} as a member");
		filingHistoryDescriptionMap.put("second-filing-of-annual-return-with-made-up-date", "**Second filing** of the annual return made up to {made_up_date}");
		filingHistoryDescriptionMap.put("second-filing-notification-of-a-person-with-significant-control", "**Second filing** for the notification of {psc_name} as a person with significant control");
		filingHistoryDescriptionMap.put("second-filing-change-details-of-a-person-with-significant-control", "**Second filing** to change the details of {psc_name} as a person with significant control");
		filingHistoryDescriptionMap.put("second-filing-cessation-of-a-person-with-significant-control", "**Second filing** for the cessation of {psc_name} as a person with significant control");
		filingHistoryDescriptionMap.put("second-filing-notification-of-a-person-with-significant-control-statement", "**Second filing** for the notification of a person with significant control statement");
		filingHistoryDescriptionMap.put("second-filing-withdrawal-of-a-person-with-significant-control-statement", "**Second filing** for the withdrawal of a person with significant control statement");
		filingHistoryDescriptionMap.put("second-filing-notification-of-a-person-with-significant-control-limited-liability-partnership", "**Second filing** for the notification of {psc_name} as a person with significant control");
		filingHistoryDescriptionMap.put("second-filing-change-details-of-a-person-with-significant-control-limited-liability-partnership", "**Second filing** to change the details of {psc_name} as a person with significant control");
		filingHistoryDescriptionMap.put("second-filing-cessation-of-a-person-with-significant-control-limited-liability-partnership", "**Second filing** for the cessation of {psc_name} as a person with significant control");
		filingHistoryDescriptionMap.put("second-filing-notification-of-a-person-with-significant-control-statement-limited-liability-partnership", "**Second filing** for the notification of a person with significant control statement");
		filingHistoryDescriptionMap.put("second-filing-withdrawal-of-a-person-with-significant-control-statement-limited-liability-partnership", "**Second filing** for the withdrawal of a person with significant control statement");
		filingHistoryDescriptionMap.put("second-filing-capital-cancellation-treasury-shares-with-date-currency-capital-figure", "**Second filing** of statement of capital on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-cancellation-treasury-shares-with-date-treasury-capital-figure", "**Second filing** of cancellation of treasury shares. Treasury capital:");
		filingHistoryDescriptionMap.put("second-filing-capital-allotment-shares", "**Second filing** of a statement of capital following an allotment of shares on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares-consolidation-statement-of-capital", "**Second filing** of consolidation of shares. Statement of capital on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares-consolidation", "**Second filing** of consolidation of shares on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares-subdivision-statement-of-capital", "**Second filing** of sub-division of shares. Statement of capital on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares-subdivision", "**Second filing** of sub-division of shares on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares-redemption-statement-of-capital", "**Second filing** of statement of capital on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares-redemption", "**Second filing** of re-demption of shares on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares-reconversion-statement-of-capital", "**Second filing** of re-conversion of shares. Statement of capital on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares-reconversion", "**Second filing** of re-conversion of shares on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares-consolidation-subdivision-reconversion-statement-of-capital", "**Second filing** of consolidation, sub-division and re-conversion of shares. Statement of capital on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares-consolidation-subdivision-reconversion", "**Second filing** of consolidation, sub-division and re-conversion of shares on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares-consolidation-subdivision-statement-of-capital", "**Second filing** of consolidation and sub-division of shares. Statement of capital on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares-consolidation-subdivision", "**Second filing** of consolidation and sub-division of shares on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares-consolidation-reconversion-statement-of-capital", "**Second filing** of consolidation and re-conversion of shares. Statement of capital on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares-consolidation-reconversion", "**Second filing** of consolidation and re-conversion of shares on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares-subdivision-reconversion-statement-of-capital", "**Second filing** of sub-division and re-conversion of shares. Statement of capital on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares-subdivision-reconversion", "**Second filing** of sub-division and re-conversion of shares on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-alter-shares", "**Second filing** of notice of consolidation, sub-division, redemption of shares or re-conversion of stock into shares");
		filingHistoryDescriptionMap.put("second-filing-capital-cancellation-shares", "**Second filing** of cancellation of shares. Statement of capital on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-cancellation-shares-by-plc", "**Second filing** of cancellation of shares by a PLC. Statement of capital on {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-redomination-of-shares", "**Second filing** of redenomination of shares. Statement of capital {date}");
		filingHistoryDescriptionMap.put("second-filing-capital-reduction-of-capital-redomination", "**Second filing** Reduction of capital following redenomination. Statement of capital on {date}");
		filingHistoryDescriptionMap.put("notice-of-removal-of-a-director", "**Notice of removal** of a director");
		filingHistoryDescriptionMap.put("notice-of-removal-of-a-corporate-director", "**Notice of removal** of a corporate director");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-audited-abridged", "**Audited abridged accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("accounts-with-accounts-type-unaudited-abridged", "**Unaudited abridged accounts** made up to {made_up_date}");
		filingHistoryDescriptionMap.put("directors-register-information-on-withdrawal-from-the-public-register", "**Directors' register** information at {date} on withdrawal from the public register");
		filingHistoryDescriptionMap.put("directors-usual-residential-address-register-information-on-withdrawal-from-the-public-register", "**Directors' usual residential address register** information at {date} on withdrawal from the public register on {date}");
		filingHistoryDescriptionMap.put("secretaries-register-information-on-withdrawal-from-the-public-register", "**Secretaries register** information at {date} on withdrawal from the public register");
		filingHistoryDescriptionMap.put("persons-with-significant-control-register-information-on-withdrawal-from-the-public-register", "**Persons' with significant control register** information at {date} on withdrawal from the public register");
		filingHistoryDescriptionMap.put("members-register-information-on-withdrawal-from-the-public-register", "**Members register** information at {date} on withdrawal from the public register");
		filingHistoryDescriptionMap.put("limited-liability-partnership-members-register-information-on-withdrawal-from-the-public-register", "**Members' register** information at {date} on withdrawal from the public register");
		filingHistoryDescriptionMap.put("limited-liability-partnership-members-usual-residential-address-register-information-on-withdrawal-from-the-public-register", "**Members' usual residential address register** information at {date} on withdrawal from the public register");
		filingHistoryDescriptionMap.put("limited-liability-partnership-persons-with-significant-control-register-information-on-withdrawal-from-the-public-register", "**Persons' with significant control register** information at {date} on withdrawal from the public register");
		filingHistoryDescriptionMap.put("confirmation-statement-with-no-updates", "**Confirmation statement** made on {made_up_date} with no updates");
		filingHistoryDescriptionMap.put("confirmation-statement-with-updates", "**Confirmation statement** made on {made_up_date} with updates");
	}

	private void createAccountTypeMap() {
		accountTypeMap.put("null", "Null");
		accountTypeMap.put("full", "Full");
		accountTypeMap.put("small", "Small");
		accountTypeMap.put("medium", "Medium");
		accountTypeMap.put("group", "Group");
		accountTypeMap.put("dormant", "Dormant");
		accountTypeMap.put("interim", "Interim");
		accountTypeMap.put("initial", "Initial");
		accountTypeMap.put("total-exemption-full", "Total Exemption Full");
		accountTypeMap.put("total-exemption-small", "Total Exemption Small");
		accountTypeMap.put("partial-exemption", "Partial Exemption");
		accountTypeMap.put("audit-exemption-subsidiary", "Audit Exemption Subsidiary");
		accountTypeMap.put("filing-exemption-subsidiary", "Filing Exemption Subsidiary");
		accountTypeMap.put("micro-entity", "Micro Entity");
	}

	private void createSicMap() {
		sicMap.put("01110", "Growing of cereals (except rice), leguminous crops and oil seeds");
		sicMap.put("01120", "Growing of rice");
		sicMap.put("01130", "Growing of vegetables and melons, roots and tubers");
		sicMap.put("01140", "Growing of sugar cane");
		sicMap.put("01150", "Growing of tobacco");
		sicMap.put("01160", "Growing of fibre crops");
		sicMap.put("01190", "Growing of other non-perennial crops");
		sicMap.put("01210", "Growing of grapes");
		sicMap.put("01220", "Growing of tropical and subtropical fruits");
		sicMap.put("01230", "Growing of citrus fruits");
		sicMap.put("01240", "Growing of pome fruits and stone fruits");
		sicMap.put("01250", "Growing of other tree and bush fruits and nuts");
		sicMap.put("01260", "Growing of oleaginous fruits");
		sicMap.put("01270", "Growing of beverage crops");
		sicMap.put("01280", "Growing of spices, aromatic, drug and pharmaceutical crops");
		sicMap.put("01290", "Growing of other perennial crops");
		sicMap.put("01300", "Plant propagation");
		sicMap.put("01410", "Raising of dairy cattle");
		sicMap.put("01420", "Raising of other cattle and buffaloes");
		sicMap.put("01430", "Raising of horses and other equines");
		sicMap.put("01440", "Raising of camels and camelids");
		sicMap.put("01450", "Raising of sheep and  goats");
		sicMap.put("01460", "Raising of swine/pigs");
		sicMap.put("01470", "Raising of poultry");
		sicMap.put("01490", "Raising of other animals");
		sicMap.put("01500", "Mixed farming");
		sicMap.put("01610", "Support activities for crop production");
		sicMap.put("01621", "Farm animal boarding and care");
		sicMap.put("01629", "Support activities for animal production (other than farm animal boarding and care) n.e.c.");
		sicMap.put("01630", "Post-harvest crop activities");
		sicMap.put("01640", "Seed processing for propagation");
		sicMap.put("01700", "Hunting, trapping and related service activities");
		sicMap.put("02100", "Silviculture and other forestry activities");
		sicMap.put("02200", "Logging");
		sicMap.put("02300", "Gathering of wild growing non-wood products");
		sicMap.put("02400", "Support services to forestry");
		sicMap.put("03110", "Marine fishing");
		sicMap.put("03120", "Freshwater fishing");
		sicMap.put("03210", "Marine aquaculture");
		sicMap.put("03220", "Freshwater aquaculture");
		sicMap.put("05101", "Deep coal mines");
		sicMap.put("05102", "Open cast coal working");
		sicMap.put("05200", "Mining of lignite");
		sicMap.put("06100", "Extraction of crude petroleum");
		sicMap.put("06200", "Extraction of natural gas");
		sicMap.put("07100", "Mining of iron ores");
		sicMap.put("07210", "Mining of uranium and thorium ores");
		sicMap.put("07290", "Mining of other non-ferrous metal ores");
		sicMap.put("08110", "Quarrying of ornamental and building stone, limestone, gypsum, chalk and slate");
		sicMap.put("08120", "Operation of gravel and sand pits; mining of clays and kaolin");
		sicMap.put("08910", "Mining of chemical and fertilizer minerals");
		sicMap.put("08920", "Extraction of peat");
		sicMap.put("08930", "Extraction of salt");
		sicMap.put("08990", "Other mining and quarrying n.e.c.");
		sicMap.put("09100", "Support activities for petroleum and natural gas extraction");
		sicMap.put("09900", "Support activities for other mining and quarrying");
		sicMap.put("10110", "Processing and preserving of meat");
		sicMap.put("10120", "Processing and preserving of poultry meat");
		sicMap.put("10130", "Production of meat and poultry meat products");
		sicMap.put("10200", "Processing and preserving of fish, crustaceans and molluscs");
		sicMap.put("10310", "Processing and preserving of potatoes");
		sicMap.put("10320", "Manufacture of fruit and vegetable juice");
		sicMap.put("10390", "Other processing and preserving of fruit and vegetables");
		sicMap.put("10410", "Manufacture of oils and fats");
		sicMap.put("10420", "Manufacture of margarine and similar edible fats");
		sicMap.put("10511", "Liquid milk and cream production");
		sicMap.put("10512", "Butter and cheese production");
		sicMap.put("10519", "Manufacture of other milk products");
		sicMap.put("10520", "Manufacture of ice cream");
		sicMap.put("10611", "Grain milling");
		sicMap.put("10612", "Manufacture of breakfast cereals and cereals-based food");
		sicMap.put("10620", "Manufacture of starches and starch products");
		sicMap.put("10710", "Manufacture of bread; manufacture of fresh pastry goods and cakes");
		sicMap.put("10720", "Manufacture of rusks and biscuits; manufacture of preserved pastry goods and cakes");
		sicMap.put("10730", "Manufacture of macaroni, noodles, couscous and similar farinaceous products");
		sicMap.put("10810", "Manufacture of sugar");
		sicMap.put("10821", "Manufacture of cocoa and chocolate confectionery");
		sicMap.put("10822", "Manufacture of sugar confectionery");
		sicMap.put("10831", "Tea processing");
		sicMap.put("10832", "Production of coffee and coffee substitutes");
		sicMap.put("10840", "Manufacture of condiments and seasonings");
		sicMap.put("10850", "Manufacture of prepared meals and dishes");
		sicMap.put("10860", "Manufacture of homogenized food preparations and dietetic food");
		sicMap.put("10890", "Manufacture of other food products n.e.c.");
		sicMap.put("10910", "Manufacture of prepared feeds for farm animals");
		sicMap.put("10920", "Manufacture of prepared pet foods");
		sicMap.put("11010", "Distilling, rectifying and blending of spirits");
		sicMap.put("11020", "Manufacture of wine from grape");
		sicMap.put("11030", "Manufacture of cider and other fruit wines");
		sicMap.put("11040", "Manufacture of other non-distilled fermented beverages");
		sicMap.put("11050", "Manufacture of beer");
		sicMap.put("11060", "Manufacture of malt");
		sicMap.put("11070", "Manufacture of soft drinks; production of mineral waters and other bottled waters");
		sicMap.put("12000", "Manufacture of tobacco products");
		sicMap.put("13100", "Preparation and spinning of textile fibres");
		sicMap.put("13200", "Weaving of textiles");
		sicMap.put("13300", "Finishing of textiles");
		sicMap.put("13910", "Manufacture of knitted and crocheted fabrics");
		sicMap.put("13921", "Manufacture of soft furnishings");
		sicMap.put("13922", "manufacture of canvas goods, sacks, etc.");
		sicMap.put("13923", "manufacture of household textiles");
		sicMap.put("13931", "Manufacture of woven or tufted carpets and rugs");
		sicMap.put("13939", "Manufacture of other carpets and rugs");
		sicMap.put("13940", "Manufacture of cordage, rope, twine and netting");
		sicMap.put("13950", "Manufacture of non-wovens and articles made from non-wovens, except apparel");
		sicMap.put("13960", "Manufacture of other technical and industrial textiles");
		sicMap.put("13990", "Manufacture of other textiles n.e.c.");
		sicMap.put("14110", "Manufacture of leather clothes");
		sicMap.put("14120", "Manufacture of workwear");
		sicMap.put("14131", "Manufacture of other men's outerwear");
		sicMap.put("14132", "Manufacture of other women's outerwear");
		sicMap.put("14141", "Manufacture of men's underwear");
		sicMap.put("14142", "Manufacture of women's underwear");
		sicMap.put("14190", "Manufacture of other wearing apparel and accessories n.e.c.");
		sicMap.put("14200", "Manufacture of articles of fur");
		sicMap.put("14310", "Manufacture of knitted and crocheted hosiery");
		sicMap.put("14390", "Manufacture of other knitted and crocheted apparel");
		sicMap.put("15110", "Tanning and dressing of leather; dressing and dyeing of fur");
		sicMap.put("15120", "Manufacture of luggage, handbags and the like, saddlery and harness");
		sicMap.put("15200", "Manufacture of footwear");
		sicMap.put("16100", "Sawmilling and planing of wood");
		sicMap.put("16210", "Manufacture of veneer sheets and wood-based panels");
		sicMap.put("16220", "Manufacture of assembled parquet floors");
		sicMap.put("16230", "Manufacture of other builders' carpentry and joinery");
		sicMap.put("16240", "Manufacture of wooden containers");
		sicMap.put("16290", "Manufacture of other products of wood; manufacture of articles of cork, straw and plaiting materials");
		sicMap.put("17110", "Manufacture of pulp");
		sicMap.put("17120", "Manufacture of paper and paperboard");
		sicMap.put("17211", "Manufacture of corrugated paper and paperboard, sacks and bags");
		sicMap.put("17219", "Manufacture of other paper and paperboard containers");
		sicMap.put("17220", "Manufacture of household and sanitary goods and of toilet requisites");
		sicMap.put("17230", "Manufacture of paper stationery");
		sicMap.put("17240", "Manufacture of wallpaper");
		sicMap.put("17290", "Manufacture of other articles of paper and paperboard n.e.c.");
		sicMap.put("18110", "Printing of newspapers");
		sicMap.put("18121", "Manufacture of printed labels");
		sicMap.put("18129", "Printing n.e.c.");
		sicMap.put("18130", "Pre-press and pre-media services");
		sicMap.put("18140", "Binding and related services");
		sicMap.put("18201", "Reproduction of sound recording");
		sicMap.put("18202", "Reproduction of video recording");
		sicMap.put("18203", "Reproduction of computer media");
		sicMap.put("19100", "Manufacture of coke oven products");
		sicMap.put("19201", "Mineral oil refining");
		sicMap.put("19209", "Other treatment of petroleum products (excluding petrochemicals manufacture)");
		sicMap.put("20110", "Manufacture of industrial gases");
		sicMap.put("20120", "Manufacture of dyes and pigments");
		sicMap.put("20130", "Manufacture of other inorganic basic chemicals");
		sicMap.put("20140", "Manufacture of other organic basic chemicals");
		sicMap.put("20150", "Manufacture of fertilizers and nitrogen compounds");
		sicMap.put("20160", "Manufacture of plastics in primary forms");
		sicMap.put("20170", "Manufacture of synthetic rubber in primary forms");
		sicMap.put("20200", "Manufacture of pesticides and other agrochemical products");
		sicMap.put("20301", "Manufacture of paints, varnishes and similar coatings, mastics and sealants");
		sicMap.put("20302", "Manufacture of printing ink");
		sicMap.put("20411", "Manufacture of soap and detergents");
		sicMap.put("20412", "Manufacture of cleaning and polishing preparations");
		sicMap.put("20420", "Manufacture of perfumes and toilet preparations");
		sicMap.put("20510", "Manufacture of explosives");
		sicMap.put("20520", "Manufacture of glues");
		sicMap.put("20530", "Manufacture of essential oils");
		sicMap.put("20590", "Manufacture of other chemical products n.e.c.");
		sicMap.put("20600", "Manufacture of man-made fibres");
		sicMap.put("21100", "Manufacture of basic pharmaceutical products");
		sicMap.put("21200", "Manufacture of pharmaceutical preparations");
		sicMap.put("22110", "Manufacture of rubber tyres and tubes; retreading and rebuilding of rubber tyres");
		sicMap.put("22190", "Manufacture of other rubber products");
		sicMap.put("22210", "Manufacture of plastic plates, sheets, tubes and profiles");
		sicMap.put("22220", "Manufacture of plastic packing goods");
		sicMap.put("22230", "Manufacture of builders  ware of plastic");
		sicMap.put("22290", "Manufacture of other plastic products");
		sicMap.put("23110", "Manufacture of flat glass");
		sicMap.put("23120", "Shaping and processing of flat glass");
		sicMap.put("23130", "Manufacture of hollow glass");
		sicMap.put("23140", "Manufacture of glass fibres");
		sicMap.put("23190", "Manufacture and processing of other glass, including technical glassware");
		sicMap.put("23200", "Manufacture of refractory products");
		sicMap.put("23310", "Manufacture of ceramic tiles and flags");
		sicMap.put("23320", "Manufacture of bricks, tiles and construction products, in baked clay");
		sicMap.put("23410", "Manufacture of ceramic household and ornamental articles");
		sicMap.put("23420", "Manufacture of ceramic sanitary fixtures");
		sicMap.put("23430", "Manufacture of ceramic insulators and insulating fittings");
		sicMap.put("23440", "Manufacture of other technical ceramic products");
		sicMap.put("23490", "Manufacture of other ceramic products n.e.c.");
		sicMap.put("23510", "Manufacture of cement");
		sicMap.put("23520", "Manufacture of lime and plaster");
		sicMap.put("23610", "Manufacture of concrete products for construction purposes");
		sicMap.put("23620", "Manufacture of plaster products for construction purposes");
		sicMap.put("23630", "Manufacture of ready-mixed concrete");
		sicMap.put("23640", "Manufacture of mortars");
		sicMap.put("23650", "Manufacture of fibre cement");
		sicMap.put("23690", "Manufacture of other articles of concrete, plaster and cement");
		sicMap.put("23700", "Cutting, shaping and finishing of stone");
		sicMap.put("23910", "Production of abrasive products");
		sicMap.put("23990", "Manufacture of other non-metallic mineral products n.e.c.");
		sicMap.put("24100", "Manufacture of basic iron and steel and of ferro-alloys");
		sicMap.put("24200", "Manufacture of tubes, pipes, hollow profiles and related fittings, of steel");
		sicMap.put("24310", "Cold drawing of bars");
		sicMap.put("24320", "Cold rolling of narrow strip");
		sicMap.put("24330", "Cold forming or folding");
		sicMap.put("24340", "Cold drawing of wire");
		sicMap.put("24410", "Precious metals production");
		sicMap.put("24420", "Aluminium production");
		sicMap.put("24430", "Lead, zinc and tin production");
		sicMap.put("24440", "Copper production");
		sicMap.put("24450", "Other non-ferrous metal production");
		sicMap.put("24460", "Processing of nuclear fuel");
		sicMap.put("24510", "Casting of iron");
		sicMap.put("24520", "Casting of steel");
		sicMap.put("24530", "Casting of light metals");
		sicMap.put("24540", "Casting of other non-ferrous metals");
		sicMap.put("25110", "Manufacture of metal structures and parts of structures");
		sicMap.put("25120", "Manufacture of doors and windows of metal");
		sicMap.put("25210", "Manufacture of central heating radiators and boilers");
		sicMap.put("25290", "Manufacture of other tanks, reservoirs and containers of metal");
		sicMap.put("25300", "Manufacture of steam generators, except central heating hot water boilers");
		sicMap.put("25400", "Manufacture of weapons and ammunition");
		sicMap.put("25500", "Forging, pressing, stamping and roll-forming of metal; powder metallurgy");
		sicMap.put("25610", "Treatment and coating of metals");
		sicMap.put("25620", "Machining");
		sicMap.put("25710", "Manufacture of cutlery");
		sicMap.put("25720", "Manufacture of locks and hinges");
		sicMap.put("25730", "Manufacture of tools");
		sicMap.put("25910", "Manufacture of steel drums and similar containers");
		sicMap.put("25920", "Manufacture of light metal packaging");
		sicMap.put("25930", "Manufacture of wire products, chain and springs");
		sicMap.put("25940", "Manufacture of fasteners and screw machine products");
		sicMap.put("25990", "Manufacture of other fabricated metal products n.e.c.");
		sicMap.put("26110", "Manufacture of electronic components");
		sicMap.put("26120", "Manufacture of loaded electronic boards");
		sicMap.put("26200", "Manufacture of computers and peripheral equipment");
		sicMap.put("26301", "Manufacture of telegraph and telephone apparatus and equipment");
		sicMap.put("26309", "Manufacture of communication equipment other than telegraph, and telephone apparatus and equipment");
		sicMap.put("26400", "Manufacture of consumer electronics");
		sicMap.put("26511", "Manufacture of electronic measuring, testing etc. equipment, not for industrial process control");
		sicMap.put("26512", "Manufacture of electronic industrial process control equipment");
		sicMap.put("26513", "Manufacture of non-electronic measuring, testing etc. equipment, not for industrial process control");
		sicMap.put("26514", "Manufacture of non-electronic industrial process control equipment");
		sicMap.put("26520", "Manufacture of watches and clocks");
		sicMap.put("26600", "Manufacture of irradiation, electromedical and electrotherapeutic equipment");
		sicMap.put("26701", "Manufacture of optical precision instruments");
		sicMap.put("26702", "Manufacture of photographic and cinematographic equipment");
		sicMap.put("26800", "Manufacture of magnetic and optical media");
		sicMap.put("27110", "Manufacture of electric motors, generators and transformers");
		sicMap.put("27120", "Manufacture of electricity distribution and control apparatus");
		sicMap.put("27200", "Manufacture of batteries and accumulators");
		sicMap.put("27310", "Manufacture of fibre optic cables");
		sicMap.put("27320", "Manufacture of other electronic and electric wires and cables");
		sicMap.put("27330", "Manufacture of wiring devices");
		sicMap.put("27400", "Manufacture of electric lighting equipment");
		sicMap.put("27510", "Manufacture of electric domestic appliances");
		sicMap.put("27520", "Manufacture of non-electric domestic appliances");
		sicMap.put("27900", "Manufacture of other electrical equipment");
		sicMap.put("28110", "Manufacture of engines and turbines, except aircraft, vehicle and cycle engines");
		sicMap.put("28120", "Manufacture of fluid power equipment");
		sicMap.put("28131", "Manufacture of pumps");
		sicMap.put("28132", "Manufacture of compressors");
		sicMap.put("28140", "Manufacture of taps and valves");
		sicMap.put("28150", "Manufacture of bearings, gears, gearing and driving elements");
		sicMap.put("28210", "Manufacture of ovens, furnaces and furnace burners");
		sicMap.put("28220", "Manufacture of lifting and handling equipment");
		sicMap.put("28230", "Manufacture of office machinery and equipment (except computers and peripheral equipment)");
		sicMap.put("28240", "Manufacture of power-driven hand tools");
		sicMap.put("28250", "Manufacture of non-domestic cooling and ventilation equipment");
		sicMap.put("28290", "Manufacture of other general-purpose machinery n.e.c.");
		sicMap.put("28301", "Manufacture of agricultural tractors");
		sicMap.put("28302", "Manufacture of agricultural and forestry machinery other than tractors");
		sicMap.put("28410", "Manufacture of metal forming machinery");
		sicMap.put("28490", "Manufacture of other machine tools");
		sicMap.put("28910", "Manufacture of machinery for metallurgy");
		sicMap.put("28921", "Manufacture of machinery for mining");
		sicMap.put("28922", "Manufacture of earthmoving equipment");
		sicMap.put("28923", "Manufacture of equipment for concrete crushing and screening and roadworks");
		sicMap.put("28930", "Manufacture of machinery for food, beverage and tobacco processing");
		sicMap.put("28940", "Manufacture of machinery for textile, apparel and leather production");
		sicMap.put("28950", "Manufacture of machinery for paper and paperboard production");
		sicMap.put("28960", "Manufacture of plastics and rubber machinery");
		sicMap.put("28990", "Manufacture of other special-purpose machinery n.e.c.");
		sicMap.put("29100", "Manufacture of motor vehicles");
		sicMap.put("29201", "Manufacture of bodies (coachwork) for motor vehicles (except caravans)");
		sicMap.put("29202", "Manufacture of trailers and semi-trailers");
		sicMap.put("29203", "Manufacture of caravans");
		sicMap.put("29310", "Manufacture of electrical and electronic equipment for motor vehicles and their engines");
		sicMap.put("29320", "Manufacture of other parts and accessories for motor vehicles");
		sicMap.put("30110", "Building of ships and floating structures");
		sicMap.put("30120", "Building of pleasure and sporting boats");
		sicMap.put("30200", "Manufacture of railway locomotives and rolling stock");
		sicMap.put("30300", "Manufacture of air and spacecraft and related machinery");
		sicMap.put("30400", "Manufacture of military fighting vehicles");
		sicMap.put("30910", "Manufacture of motorcycles");
		sicMap.put("30920", "Manufacture of bicycles and invalid carriages");
		sicMap.put("30990", "Manufacture of other transport equipment n.e.c.");
		sicMap.put("31010", "Manufacture of office and shop furniture");
		sicMap.put("31020", "Manufacture of kitchen furniture");
		sicMap.put("31030", "Manufacture of mattresses");
		sicMap.put("31090", "Manufacture of other furniture");
		sicMap.put("32110", "Striking of coins");
		sicMap.put("32120", "Manufacture of jewellery and related articles");
		sicMap.put("32130", "Manufacture of imitation jewellery and related articles");
		sicMap.put("32200", "Manufacture of musical instruments");
		sicMap.put("32300", "Manufacture of sports goods");
		sicMap.put("32401", "Manufacture of professional and arcade games and toys");
		sicMap.put("32409", "Manufacture of other games and toys, n.e.c.");
		sicMap.put("32500", "Manufacture of medical and dental instruments and supplies");
		sicMap.put("32910", "Manufacture of brooms and brushes");
		sicMap.put("32990", "Other manufacturing n.e.c.");
		sicMap.put("33110", "Repair of fabricated metal products");
		sicMap.put("33120", "Repair of machinery");
		sicMap.put("33130", "Repair of electronic and optical equipment");
		sicMap.put("33140", "Repair of electrical equipment");
		sicMap.put("33150", "Repair and maintenance of ships and boats");
		sicMap.put("33160", "Repair and maintenance of aircraft and spacecraft");
		sicMap.put("33170", "Repair and maintenance of other transport equipment n.e.c.");
		sicMap.put("33190", "Repair of other equipment");
		sicMap.put("33200", "Installation of industrial machinery and equipment");
		sicMap.put("35110", "Production of electricity");
		sicMap.put("35120", "Transmission of electricity");
		sicMap.put("35130", "Distribution of electricity");
		sicMap.put("35140", "Trade of electricity");
		sicMap.put("35210", "Manufacture of gas");
		sicMap.put("35220", "Distribution of gaseous fuels through mains");
		sicMap.put("35230", "Trade of gas through mains");
		sicMap.put("35300", "Steam and air conditioning supply");
		sicMap.put("36000", "Water collection, treatment and supply");
		sicMap.put("37000", "Sewerage");
		sicMap.put("38110", "Collection of non-hazardous waste");
		sicMap.put("38120", "Collection of hazardous waste");
		sicMap.put("38210", "Treatment and disposal of non-hazardous waste");
		sicMap.put("38220", "Treatment and disposal of hazardous waste");
		sicMap.put("38310", "Dismantling of wrecks");
		sicMap.put("38320", "Recovery of sorted materials");
		sicMap.put("39000", "Remediation activities and other waste management services");
		sicMap.put("41100", "Development of building projects");
		sicMap.put("41201", "Construction of commercial buildings");
		sicMap.put("41202", "Construction of domestic buildings");
		sicMap.put("42110", "Construction of roads and motorways");
		sicMap.put("42120", "Construction of railways and underground railways");
		sicMap.put("42130", "Construction of bridges and tunnels");
		sicMap.put("42210", "Construction of utility projects for fluids");
		sicMap.put("42220", "Construction of utility projects for electricity and telecommunications");
		sicMap.put("42910", "Construction of water projects");
		sicMap.put("42990", "Construction of other civil engineering projects n.e.c.");
		sicMap.put("43110", "Demolition");
		sicMap.put("43120", "Site preparation");
		sicMap.put("43130", "Test drilling and boring");
		sicMap.put("43210", "Electrical installation");
		sicMap.put("43220", "Plumbing, heat and air-conditioning installation");
		sicMap.put("43290", "Other construction installation");
		sicMap.put("43310", "Plastering");
		sicMap.put("43320", "Joinery installation");
		sicMap.put("43330", "Floor and wall covering");
		sicMap.put("43341", "Painting");
		sicMap.put("43342", "Glazing");
		sicMap.put("43390", "Other building completion and finishing");
		sicMap.put("43910", "Roofing activities");
		sicMap.put("43991", "Scaffold erection");
		sicMap.put("43999", "Other specialised construction activities n.e.c.");
		sicMap.put("45111", "Sale of new cars and light motor vehicles");
		sicMap.put("45112", "Sale of used cars and light motor vehicles");
		sicMap.put("45190", "Sale of other motor vehicles");
		sicMap.put("45200", "Maintenance and repair of motor vehicles");
		sicMap.put("45310", "Wholesale trade of motor vehicle parts and accessories");
		sicMap.put("45320", "Retail trade of motor vehicle parts and accessories");
		sicMap.put("45400", "Sale, maintenance and repair of motorcycles and related parts and accessories");
		sicMap.put("46110", "Agents selling agricultural raw materials, livestock, textile raw materials and semi-finished goods");
		sicMap.put("46120", "Agents involved in the sale of fuels, ores, metals and industrial chemicals");
		sicMap.put("46130", "Agents involved in the sale of timber and building materials");
		sicMap.put("46140", "Agents involved in the sale of machinery, industrial equipment, ships and aircraft");
		sicMap.put("46150", "Agents involved in the sale of furniture, household goods, hardware and ironmongery");
		sicMap.put("46160", "Agents involved in the sale of textiles, clothing, fur, footwear and leather goods");
		sicMap.put("46170", "Agents involved in the sale of food, beverages and tobacco");
		sicMap.put("46180", "Agents specialized in the sale of other particular products");
		sicMap.put("46190", "Agents involved in the sale of a variety of goods");
		sicMap.put("46210", "Wholesale of grain, unmanufactured tobacco, seeds and animal feeds");
		sicMap.put("46220", "Wholesale of flowers and plants");
		sicMap.put("46230", "Wholesale of live animals");
		sicMap.put("46240", "Wholesale of hides, skins and leather");
		sicMap.put("46310", "Wholesale of fruit and vegetables");
		sicMap.put("46320", "Wholesale of meat and meat products");
		sicMap.put("46330", "Wholesale of dairy products, eggs and edible oils and fats");
		sicMap.put("46341", "Wholesale of fruit and vegetable juices, mineral water and soft drinks");
		sicMap.put("46342", "Wholesale of wine, beer, spirits and other alcoholic beverages");
		sicMap.put("46350", "Wholesale of tobacco products");
		sicMap.put("46360", "Wholesale of sugar and chocolate and sugar confectionery");
		sicMap.put("46370", "Wholesale of coffee, tea, cocoa and spices");
		sicMap.put("46380", "Wholesale of other food, including fish, crustaceans and molluscs");
		sicMap.put("46390", "Non-specialised wholesale of food, beverages and tobacco");
		sicMap.put("46410", "Wholesale of textiles");
		sicMap.put("46420", "Wholesale of clothing and footwear");
		sicMap.put("46431", "Wholesale of audio tapes, records, CDs and video tapes and the equipment on which these are played");
		sicMap.put("46439", "Wholesale of radio, television goods & electrical household appliances (other than records, tapes, CD's & video tapes and the equipment used for playing them)");
		sicMap.put("46440", "Wholesale of china and glassware and cleaning materials");
		sicMap.put("46450", "Wholesale of perfume and cosmetics");
		sicMap.put("46460", "Wholesale of pharmaceutical goods");
		sicMap.put("46470", "Wholesale of furniture, carpets and lighting equipment");
		sicMap.put("46480", "Wholesale of watches and jewellery");
		sicMap.put("46491", "Wholesale of musical instruments");
		sicMap.put("46499", "Wholesale of household goods (other than musical instruments) n.e.c.");
		sicMap.put("46510", "Wholesale of computers, computer peripheral equipment and software");
		sicMap.put("46520", "Wholesale of electronic and telecommunications equipment and parts");
		sicMap.put("46610", "Wholesale of agricultural machinery, equipment and supplies");
		sicMap.put("46620", "Wholesale of machine tools");
		sicMap.put("46630", "Wholesale of mining, construction and civil engineering machinery");
		sicMap.put("46640", "Wholesale of machinery for the textile industry and of sewing and knitting machines");
		sicMap.put("46650", "Wholesale of office furniture");
		sicMap.put("46660", "Wholesale of other office machinery and equipment");
		sicMap.put("46690", "Wholesale of other machinery and equipment");
		sicMap.put("46711", "Wholesale of petroleum and petroleum products");
		sicMap.put("46719", "Wholesale of other fuels and related products");
		sicMap.put("46720", "Wholesale of metals and metal ores");
		sicMap.put("46730", "Wholesale of wood, construction materials and sanitary equipment");
		sicMap.put("46740", "Wholesale of hardware, plumbing and heating equipment and supplies");
		sicMap.put("46750", "Wholesale of chemical products");
		sicMap.put("46760", "Wholesale of other intermediate products");
		sicMap.put("46770", "Wholesale of waste and scrap");
		sicMap.put("46900", "Non-specialised wholesale trade");
		sicMap.put("47110", "Retail sale in non-specialised stores with food, beverages or tobacco predominating");
		sicMap.put("47190", "Other retail sale in non-specialised stores");
		sicMap.put("47210", "Retail sale of fruit and vegetables in specialised stores");
		sicMap.put("47220", "Retail sale of meat and meat products in specialised stores");
		sicMap.put("47230", "Retail sale of fish, crustaceans and molluscs in specialised stores");
		sicMap.put("47240", "Retail sale of bread, cakes, flour confectionery and sugar confectionery in specialised stores");
		sicMap.put("47250", "Retail sale of beverages in specialised stores");
		sicMap.put("47260", "Retail sale of tobacco products in specialised stores");
		sicMap.put("47290", "Other retail sale of food in specialised stores");
		sicMap.put("47300", "Retail sale of automotive fuel in specialised stores");
		sicMap.put("47410", "Retail sale of computers, peripheral units and software in specialised stores");
		sicMap.put("47421", "Retail sale of mobile telephones");
		sicMap.put("47429", "Retail sale of telecommunications equipment other than mobile telephones");
		sicMap.put("47430", "Retail sale of audio and video equipment in specialised stores");
		sicMap.put("47510", "Retail sale of textiles in specialised stores");
		sicMap.put("47520", "Retail sale of hardware, paints and glass in specialised stores");
		sicMap.put("47530", "Retail sale of carpets, rugs, wall and floor coverings in specialised stores");
		sicMap.put("47540", "Retail sale of electrical household appliances in specialised stores");
		sicMap.put("47591", "Retail sale of musical instruments and scores");
		sicMap.put("47599", "Retail of furniture, lighting, and similar (not musical instruments or scores) in specialised store");
		sicMap.put("47610", "Retail sale of books in specialised stores");
		sicMap.put("47620", "Retail sale of newspapers and stationery in specialised stores");
		sicMap.put("47630", "Retail sale of music and video recordings in specialised stores");
		sicMap.put("47640", "Retail sale of sports goods, fishing gear, camping goods, boats and bicycles");
		sicMap.put("47650", "Retail sale of games and toys in specialised stores");
		sicMap.put("47710", "Retail sale of clothing in specialised stores");
		sicMap.put("47721", "Retail sale of footwear in specialised stores");
		sicMap.put("47722", "Retail sale of leather goods in specialised stores");
		sicMap.put("47730", "Dispensing chemist in specialised stores");
		sicMap.put("47741", "Retail sale of hearing aids");
		sicMap.put("47749", "Retail sale of medical and orthopaedic goods in specialised stores (not incl. hearing aids) n.e.c.");
		sicMap.put("47750", "Retail sale of cosmetic and toilet articles in specialised stores");
		sicMap.put("47760", "Retail sale of flowers, plants, seeds, fertilizers, pet animals and pet food in specialised stores");
		sicMap.put("47770", "Retail sale of watches and jewellery in specialised stores");
		sicMap.put("47781", "Retail sale in commercial art galleries");
		sicMap.put("47782", "Retail sale by opticians");
		sicMap.put("47789", "Other retail sale of new goods in specialised stores (not commercial art galleries and opticians)");
		sicMap.put("47791", "Retail sale of antiques including antique books in stores");
		sicMap.put("47799", "Retail sale of other second-hand goods in stores (not incl. antiques)");
		sicMap.put("47810", "Retail sale via stalls and markets of food, beverages and tobacco products");
		sicMap.put("47820", "Retail sale via stalls and markets of textiles, clothing and footwear");
		sicMap.put("47890", "Retail sale via stalls and markets of other goods");
		sicMap.put("47910", "Retail sale via mail order houses or via Internet");
		sicMap.put("47990", "Other retail sale not in stores, stalls or markets");
		sicMap.put("49100", "Passenger rail transport, interurban");
		sicMap.put("49200", "Freight rail transport");
		sicMap.put("49311", "Urban and suburban passenger railway transportation by underground, metro and similar systems");
		sicMap.put("49319", "Other urban, suburban or metropolitan passenger land transport (not underground, metro or similar)");
		sicMap.put("49320", "Taxi operation");
		sicMap.put("49390", "Other passenger land transport");
		sicMap.put("49410", "Freight transport by road");
		sicMap.put("49420", "Removal services");
		sicMap.put("49500", "Transport via pipeline");
		sicMap.put("50100", "Sea and coastal passenger water transport");
		sicMap.put("50200", "Sea and coastal freight water transport");
		sicMap.put("50300", "Inland passenger water transport");
		sicMap.put("50400", "Inland freight water transport");
		sicMap.put("51101", "Scheduled passenger air transport");
		sicMap.put("51102", "Non-scheduled passenger air transport");
		sicMap.put("51210", "Freight air transport");
		sicMap.put("51220", "Space transport");
		sicMap.put("52101", "Operation of warehousing and storage facilities for water transport activities");
		sicMap.put("52102", "Operation of warehousing and storage facilities for air transport activities");
		sicMap.put("52103", "Operation of warehousing and storage facilities for land transport activities");
		sicMap.put("52211", "Operation of rail freight terminals");
		sicMap.put("52212", "Operation of rail passenger facilities at railway stations");
		sicMap.put("52213", "Operation of bus and coach passenger facilities at bus and coach stations");
		sicMap.put("52219", "Other service activities incidental to land transportation, n.e.c.");
		sicMap.put("52220", "Service activities incidental to water transportation");
		sicMap.put("52230", "Service activities incidental to air transportation");
		sicMap.put("52241", "Cargo handling for water transport activities");
		sicMap.put("52242", "Cargo handling for air transport activities");
		sicMap.put("52243", "Cargo handling for land transport activities");
		sicMap.put("52290", "Other transportation support activities");
		sicMap.put("53100", "Postal activities under universal service obligation");
		sicMap.put("53201", "Licensed carriers");
		sicMap.put("53202", "Unlicensed carrier");
		sicMap.put("55100", "Hotels and similar accommodation");
		sicMap.put("55201", "Holiday centres and villages");
		sicMap.put("55202", "Youth hostels");
		sicMap.put("55209", "Other holiday and other collective accommodation");
		sicMap.put("55300", "Recreational vehicle parks, trailer parks and camping grounds");
		sicMap.put("55900", "Other accommodation");
		sicMap.put("56101", "Licensed restaurants");
		sicMap.put("56102", "Unlicensed restaurants and cafes");
		sicMap.put("56103", "Take-away food shops and mobile food stands");
		sicMap.put("56210", "Event catering activities");
		sicMap.put("56290", "Other food services");
		sicMap.put("56301", "Licensed clubs");
		sicMap.put("56302", "Public houses and bars");
		sicMap.put("58110", "Book publishing");
		sicMap.put("58120", "Publishing of directories and mailing lists");
		sicMap.put("58130", "Publishing of newspapers");
		sicMap.put("58141", "Publishing of learned journals");
		sicMap.put("58142", "Publishing of  consumer and business journals and periodicals");
		sicMap.put("58190", "Other publishing activities");
		sicMap.put("58210", "Publishing of computer games");
		sicMap.put("58290", "Other software publishing");
		sicMap.put("59111", "Motion picture production activities");
		sicMap.put("59112", "Video production activities");
		sicMap.put("59113", "Television programme production activities");
		sicMap.put("59120", "Motion picture, video and television programme post-production activities");
		sicMap.put("59131", "Motion picture distribution activities");
		sicMap.put("59132", "Video distribution activities");
		sicMap.put("59133", "Television programme distribution activities");
		sicMap.put("59140", "Motion picture projection activities");
		sicMap.put("59200", "Sound recording and music publishing activities");
		sicMap.put("60100", "Radio broadcasting");
		sicMap.put("60200", "Television programming and broadcasting activities");
		sicMap.put("61100", "Wired telecommunications activities");
		sicMap.put("61200", "Wireless telecommunications activities");
		sicMap.put("61300", "Satellite telecommunications activities");
		sicMap.put("61900", "Other telecommunications activities");
		sicMap.put("62011", "Ready-made interactive leisure and entertainment software development");
		sicMap.put("62012", "Business and domestic software development");
		sicMap.put("62020", "Information technology consultancy activities");
		sicMap.put("62030", "Computer facilities management activities");
		sicMap.put("62090", "Other information technology service activities");
		sicMap.put("63110", "Data processing, hosting and related activities");
		sicMap.put("63120", "Web portals");
		sicMap.put("63910", "News agency activities");
		sicMap.put("63990", "Other information service activities n.e.c.");
		sicMap.put("64110", "Central banking");
		sicMap.put("64191", "Banks");
		sicMap.put("64192", "Building societies");
		sicMap.put("64201", "Activities of agricultural holding companies");
		sicMap.put("64202", "Activities of production holding companies");
		sicMap.put("64203", "Activities of construction holding companies");
		sicMap.put("64204", "Activities of distribution holding companies");
		sicMap.put("64205", "Activities of financial services holding companies");
		sicMap.put("64209", "Activities of other holding companies n.e.c.");
		sicMap.put("64301", "Activities of investment trusts");
		sicMap.put("64302", "Activities of unit trusts");
		sicMap.put("64303", "Activities of venture and development capital companies");
		sicMap.put("64304", "Activities of open-ended investment companies");
		sicMap.put("64305", "Activities of property unit trusts");
		sicMap.put("64306", "Activities of real estate investment trusts");
		sicMap.put("64910", "Financial leasing");
		sicMap.put("64921", "Credit granting by non-deposit taking finance houses and other specialist consumer credit grantors");
		sicMap.put("64922", "Activities of mortgage finance companies");
		sicMap.put("64929", "Other credit granting n.e.c.");
		sicMap.put("64991", "Security dealing on own account");
		sicMap.put("64992", "Factoring");
		sicMap.put("64999", "Financial intermediation not elsewhere classified");
		sicMap.put("65110", "Life insurance");
		sicMap.put("65120", "Non-life insurance");
		sicMap.put("65201", "Life reinsurance");
		sicMap.put("65202", "Non-life reinsurance");
		sicMap.put("65300", "Pension funding");
		sicMap.put("66110", "Administration of financial markets");
		sicMap.put("66120", "Security and commodity contracts dealing activities");
		sicMap.put("66190", "Activities auxiliary to financial intermediation n.e.c.");
		sicMap.put("66210", "Risk and damage evaluation");
		sicMap.put("66220", "Activities of insurance agents and brokers");
		sicMap.put("66290", "Other activities auxiliary to insurance and pension funding");
		sicMap.put("66300", "Fund management activities");
		sicMap.put("68100", "Buying and selling of own real estate");
		sicMap.put("68201", "Renting and operating of Housing Association real estate");
		sicMap.put("68202", "Letting and operating of conference and exhibition centres");
		sicMap.put("68209", "Other letting and operating of own or leased real estate");
		sicMap.put("68310", "Real estate agencies");
		sicMap.put("68320", "Management of real estate on a fee or contract basis");
		sicMap.put("69101", "Barristers at law");
		sicMap.put("69102", "Solicitors");
		sicMap.put("69109", "Activities of patent and copyright agents; other legal activities n.e.c.");
		sicMap.put("69201", "Accounting and auditing activities");
		sicMap.put("69202", "Bookkeeping activities");
		sicMap.put("69203", "Tax consultancy");
		sicMap.put("70100", "Activities of head offices");
		sicMap.put("70210", "Public relations and communications activities");
		sicMap.put("70221", "Financial management");
		sicMap.put("70229", "Management consultancy activities other than financial management");
		sicMap.put("71111", "Architectural activities");
		sicMap.put("71112", "Urban planning and landscape architectural activities");
		sicMap.put("71121", "Engineering design activities for industrial process and production");
		sicMap.put("71122", "Engineering related scientific and technical consulting activities");
		sicMap.put("71129", "Other engineering activities");
		sicMap.put("71200", "Technical testing and analysis");
		sicMap.put("72110", "Research and experimental development on biotechnology");
		sicMap.put("72190", "Other research and experimental development on natural sciences and engineering");
		sicMap.put("72200", "Research and experimental development on social sciences and humanities");
		sicMap.put("73110", "Advertising agencies");
		sicMap.put("73120", "Media representation services");
		sicMap.put("73200", "Market research and public opinion polling");
		sicMap.put("74100", "specialised design activities");
		sicMap.put("74201", "Portrait photographic activities");
		sicMap.put("74202", "Other specialist photography");
		sicMap.put("74203", "Film processing");
		sicMap.put("74209", "Photographic activities not elsewhere classified");
		sicMap.put("74300", "Translation and interpretation activities");
		sicMap.put("74901", "Environmental consulting activities");
		sicMap.put("74902", "Quantity surveying activities");
		sicMap.put("74909", "Other professional, scientific and technical activities n.e.c.");
		sicMap.put("74990", "Non-trading company");
		sicMap.put("75000", "Veterinary activities");
		sicMap.put("77110", "Renting and leasing of cars and light motor vehicles");
		sicMap.put("77120", "Renting and leasing of trucks and other heavy vehicles");
		sicMap.put("77210", "Renting and leasing of recreational and sports goods");
		sicMap.put("77220", "Renting of video tapes and disks");
		sicMap.put("77291", "Renting and leasing of media entertainment equipment");
		sicMap.put("77299", "Renting and leasing of other personal and household goods");
		sicMap.put("77310", "Renting and leasing of agricultural machinery and equipment");
		sicMap.put("77320", "Renting and leasing of construction and civil engineering machinery and equipment");
		sicMap.put("77330", "Renting and leasing of office machinery and equipment (including computers)");
		sicMap.put("77341", "Renting and leasing of passenger water transport equipment");
		sicMap.put("77342", "Renting and leasing of freight water transport equipment");
		sicMap.put("77351", "Renting and leasing of air passenger transport equipment");
		sicMap.put("77352", "Renting and leasing of freight air transport equipment");
		sicMap.put("77390", "Renting and leasing of other machinery, equipment and tangible goods n.e.c.");
		sicMap.put("77400", "Leasing of intellectual property and similar products, except copyright works");
		sicMap.put("78101", "Motion picture, television and other theatrical casting activities");
		sicMap.put("78109", "Other activities of employment placement agencies");
		sicMap.put("78200", "Temporary employment agency activities");
		sicMap.put("78300", "Human resources provision and management of human resources functions");
		sicMap.put("79110", "Travel agency activities");
		sicMap.put("79120", "Tour operator activities");
		sicMap.put("79901", "Activities of tourist guides");
		sicMap.put("79909", "Other reservation service activities n.e.c.");
		sicMap.put("80100", "Private security activities");
		sicMap.put("80200", "Security systems service activities");
		sicMap.put("80300", "Investigation activities");
		sicMap.put("81100", "Combined facilities support activities");
		sicMap.put("81210", "General cleaning of buildings");
		sicMap.put("81221", "Window cleaning services");
		sicMap.put("81222", "Specialised cleaning services");
		sicMap.put("81223", "Furnace and chimney cleaning services");
		sicMap.put("81229", "Other building and industrial cleaning activities");
		sicMap.put("81291", "Disinfecting and exterminating services");
		sicMap.put("81299", "Other cleaning services");
		sicMap.put("81300", "Landscape service activities");
		sicMap.put("82110", "Combined office administrative service activities");
		sicMap.put("82190", "Photocopying, document preparation and other specialised office support activities");
		sicMap.put("82200", "Activities of call centres");
		sicMap.put("82301", "Activities of exhibition and fair organisers");
		sicMap.put("82302", "Activities of conference organisers");
		sicMap.put("82911", "Activities of collection agencies");
		sicMap.put("82912", "Activities of credit bureaus");
		sicMap.put("82920", "Packaging activities");
		sicMap.put("82990", "Other business support service activities n.e.c.");
		sicMap.put("84110", "General public administration activities");
		sicMap.put("84120", "Regulation of health care, education, cultural and other social services, not incl. social security");
		sicMap.put("84130", "Regulation of and contribution to more efficient operation of businesses");
		sicMap.put("84210", "Foreign affairs");
		sicMap.put("84220", "Defence activities");
		sicMap.put("84230", "Justice and judicial activities");
		sicMap.put("84240", "Public order and safety activities");
		sicMap.put("84250", "Fire service activities");
		sicMap.put("84300", "Compulsory social security activities");
		sicMap.put("85100", "Pre-primary education");
		sicMap.put("85200", "Primary education");
		sicMap.put("85310", "General secondary education");
		sicMap.put("85320", "Technical and vocational secondary education");
		sicMap.put("85410", "Post-secondary non-tertiary education");
		sicMap.put("85421", "First-degree level higher education");
		sicMap.put("85422", "Post-graduate level higher education");
		sicMap.put("85510", "Sports and recreation education");
		sicMap.put("85520", "Cultural education");
		sicMap.put("85530", "Driving school activities");
		sicMap.put("85590", "Other education n.e.c.");
		sicMap.put("85600", "Educational support services");
		sicMap.put("86101", "Hospital activities");
		sicMap.put("86102", "Medical nursing home activities");
		sicMap.put("86210", "General medical practice activities");
		sicMap.put("86220", "Specialists medical practice activities");
		sicMap.put("86230", "Dental practice activities");
		sicMap.put("86900", "Other human health activities");
		sicMap.put("87100", "Residential nursing care facilities");
		sicMap.put("87200", "Residential care activities for learning difficulties, mental health and substance abuse");
		sicMap.put("87300", "Residential care activities for the elderly and disabled");
		sicMap.put("87900", "Other residential care activities n.e.c.");
		sicMap.put("88100", "Social work activities without accommodation for the elderly and disabled");
		sicMap.put("88910", "Child day-care activities");
		sicMap.put("88990", "Other social work activities without accommodation n.e.c.");
		sicMap.put("90010", "Performing arts");
		sicMap.put("90020", "Support activities to performing arts");
		sicMap.put("90030", "Artistic creation");
		sicMap.put("90040", "Operation of arts facilities");
		sicMap.put("91011", "Library activities");
		sicMap.put("91012", "Archives activities");
		sicMap.put("91020", "Museums activities");
		sicMap.put("91030", "Operation of historical sites and buildings and similar visitor attractions");
		sicMap.put("91040", "Botanical and zoological gardens and nature reserves activities");
		sicMap.put("92000", "Gambling and betting activities");
		sicMap.put("93110", "Operation of sports facilities");
		sicMap.put("93120", "Activities of sport clubs");
		sicMap.put("93130", "Fitness facilities");
		sicMap.put("93191", "Activities of racehorse owners");
		sicMap.put("93199", "Other sports activities");
		sicMap.put("93210", "Activities of amusement parks and theme parks");
		sicMap.put("93290", "Other amusement and recreation activities n.e.c.");
		sicMap.put("94110", "Activities of business and employers membership organizations");
		sicMap.put("94120", "Activities of professional membership organizations");
		sicMap.put("94200", "Activities of trade unions");
		sicMap.put("94910", "Activities of religious organizations");
		sicMap.put("94920", "Activities of political organizations");
		sicMap.put("94990", "Activities of other membership organizations n.e.c.");
		sicMap.put("95110", "Repair of computers and peripheral equipment");
		sicMap.put("95120", "Repair of communication equipment");
		sicMap.put("95210", "Repair of consumer electronics");
		sicMap.put("95220", "Repair of household appliances and home and garden equipment");
		sicMap.put("95230", "Repair of footwear and leather goods");
		sicMap.put("95240", "Repair of furniture and home furnishings");
		sicMap.put("95250", "Repair of watches, clocks and jewellery");
		sicMap.put("95290", "Repair of personal and household goods n.e.c.");
		sicMap.put("96010", "Washing and (dry-)cleaning of textile and fur products");
		sicMap.put("96020", "Hairdressing and other beauty treatment");
		sicMap.put("96030", "Funeral and related activities");
		sicMap.put("96040", "Physical well-being activities");
		sicMap.put("96090", "Other service activities n.e.c.");
		sicMap.put("97000", "Activities of households as employers of domestic personnel");
		sicMap.put("98000", "Residents property management");
		sicMap.put("98100", "Undifferentiated goods-producing activities of private households for own use");
		sicMap.put("98200", "Undifferentiated service-producing activities of private households for own use");
		sicMap.put("99000", "Activities of extraterritorial organizations and bodies");
		sicMap.put("99999", "Dormant Company");
	}
}
